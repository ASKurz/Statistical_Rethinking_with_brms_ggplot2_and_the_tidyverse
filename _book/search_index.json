[
["multilevel-models.html", "12 Multilevel Models 12.1 Example: Multilevel tadpoles 12.2 Varying effects and the underfitting/overfitting trade-off 12.3 More than one type of cluster 12.4 Multilevel posterior predictions 12.5 Summary Bonus: tidybayes::spread_draws() Reference Session info", " 12 Multilevel Models Multilevel models… remember features of each cluster in the data as they learn about all of the clusters. Depending upon the variation among clusters, which is learned from the data as well, the model pools information across clusters. This pooling tends to improve estimates about each cluster. This improved estimation leads to several, more pragmatic sounding, benefits of the multilevel approach. (p. 356) These benefits include: improved estimates for repeated sampling (i.e., in longitudinal data) improved estimates when there are imbalances among subsamples estimates of the variation across subsamples avoiding simplistic averaging by retaining variation across subsamples All of these benefits flow out of the same strategy and model structure. You learn one basic design and you get all of this for free. When it comes to regression, multilevel regression deserves to be the default approach. There are certainly contexts in which it would be better to use an old-fashioned single-level model. But the contexts in which multilevel models are superior are much more numerous. It is better to begin to build a multilevel analysis, and then realize it’s unnecessary, than to overlook it. And once you grasp the basic multilevel stragety, it becomes much easier to incorporate related tricks such as allowing for measurement error in the data and even model missing data itself (Chapter 14). (p. 356) I’m totally on board with this. After learning about the multilevel model, I see it everywhere. For more on the sentiment it should be the default, check out McElreath’s blog post, Multilevel Regression as Default. 12.1 Example: Multilevel tadpoles Let’s get the reedfrogs data from rethinking. library(rethinking) data(reedfrogs) d &lt;- reedfrogs Detach rethinking and load brms. rm(reedfrogs) detach(package:rethinking, unload = T) library(brms) Go ahead and acquaint yourself with the reedfrogs. library(tidyverse) d %&gt;% glimpse() ## Observations: 48 ## Variables: 5 ## $ density &lt;int&gt; 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,… ## $ pred &lt;fct&gt; no, no, no, no, no, no, no, no, pred, pred, pred, pred,… ## $ size &lt;fct&gt; big, big, big, big, small, small, small, small, big, bi… ## $ surv &lt;int&gt; 9, 10, 7, 10, 9, 9, 10, 9, 4, 9, 7, 6, 7, 5, 9, 9, 24, … ## $ propsurv &lt;dbl&gt; 0.90, 1.00, 0.70, 1.00, 0.90, 0.90, 1.00, 0.90, 0.40, 0… Making the tank cluster variable is easy. d &lt;- d %&gt;% mutate(tank = 1:nrow(d)) Here’s the formula for the un-pooled model in which each tank gets its own intercept. \\[ \\begin{eqnarray} \\text{surv}_i &amp; \\sim &amp; \\text{Binomial} (n_i, p_i) \\\\ \\text{logit} (p_i) &amp; = &amp; \\alpha_{\\text{tank}_i} \\\\ \\alpha_{\\text{tank}} &amp; \\sim &amp; \\text{Normal} (0, 5) \\end{eqnarray} \\] And \\(n_i = \\text{density}_i\\). Now we’ll fit this simple aggregated binomial model much like we practiced in Chapter 10. b12.1 &lt;- brm(data = d, family = binomial, surv | trials(density) ~ 0 + factor(tank), prior(normal(0, 5), class = b), iter = 2000, warmup = 500, chains = 4, cores = 4, seed = 12) The formula for the multilevel alternative is \\[ \\begin{eqnarray} \\text{surv}_i &amp; \\sim &amp; \\text{Binomial} (n_i, p_i) \\\\ \\text{logit} (p_i) &amp; = &amp; \\alpha_{\\text{tank}_i} \\\\ \\alpha_{\\text{tank}} &amp; \\sim &amp; \\text{Normal} (\\alpha, \\sigma) \\\\ \\alpha &amp; \\sim &amp; \\text{Normal} (0, 1) \\\\ \\sigma &amp; \\sim &amp; \\text{HalfCauchy} (0, 1) \\end{eqnarray} \\] You specify the corresponding multilevel model like this. b12.2 &lt;- brm(data = d, family = binomial, surv | trials(density) ~ 1 + (1 | tank), prior = c(prior(normal(0, 1), class = Intercept), prior(cauchy(0, 1), class = sd)), iter = 4000, warmup = 1000, chains = 4, cores = 4, seed = 12) The syntax for the varying effects follows the lme4 style, ( &lt;varying parameter(s)&gt; | &lt;grouping variable(s)&gt; ). In this case (1 | tank) indicates only the intercept, 1, varies by tank. The extent to which parameters vary is controlled by the prior, prior(cauchy(0, 1), class = sd), which is parameterized in the standard deviation metric. Do note that last part. It’s common in multilevel software to model in the variance metric, instead. Let’s do the WAIC comparisons. b12.1 &lt;- add_criterion(b12.1, &quot;waic&quot;) b12.2 &lt;- add_criterion(b12.2, &quot;waic&quot;) w &lt;- loo_compare(b12.1, b12.2, criterion = &quot;waic&quot;) print(w, simplify = F) ## elpd_diff se_diff elpd_waic se_elpd_waic p_waic se_p_waic waic ## b12.2 0.0 0.0 -100.0 3.6 20.9 0.8 200.0 ## b12.1 -1.1 2.3 -101.0 4.7 22.9 0.7 202.1 ## se_waic ## b12.2 7.2 ## b12.1 9.4 The se_diff is large relative to the elpd_diff. If we convert the \\(\\text{elpd}\\) difference to the WAIC metric, the message stays the same. cbind(waic_diff = w[, 1] * -2, se = w[, 2] * 2) ## waic_diff se ## b12.2 0.000000 0.000000 ## b12.1 2.132735 4.555047 I’m not going to show it here, but if you’d like a challenge, try comparing the models with the LOO. You’ll learn all about high pareto_k values, kfold() recommendations, and challenges implementing those kfold() recommendations. If you’re interested, pour yourself a calming adult beverage, execute the code below, and check out the Kfold(): “Error: New factor levels are not allowed” thread in the Stan forums. b12.1 &lt;- add_criterion(b12.1, &quot;loo&quot;) b12.2 &lt;- add_criterion(b12.2, &quot;loo&quot;) But back on track, here’s our prep work for Figure 12.1. post &lt;- posterior_samples(b12.2, add_chain = T) post_mdn &lt;- coef(b12.2, robust = T)$tank[, , ] %&gt;% as_tibble() %&gt;% bind_cols(d) %&gt;% mutate(post_mdn = inv_logit_scaled(Estimate)) post_mdn ## # A tibble: 48 x 11 ## Estimate Est.Error Q2.5 Q97.5 density pred size surv propsurv tank ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 2.08 0.850 0.589 4.09 10 no big 9 0.9 1 ## 2 2.95 1.05 1.19 5.44 10 no big 10 1 2 ## 3 0.970 0.652 -0.255 2.39 10 no big 7 0.7 3 ## 4 2.95 1.06 1.19 5.52 10 no big 10 1 4 ## 5 2.07 0.856 0.567 4.02 10 no small 9 0.9 5 ## 6 2.06 0.832 0.602 4.00 10 no small 9 0.9 6 ## 7 2.96 1.09 1.17 5.51 10 no small 10 1 7 ## 8 2.05 0.842 0.598 3.96 10 no small 9 0.9 8 ## 9 -0.183 0.606 -1.41 0.992 10 pred big 4 0.4 9 ## 10 2.06 0.839 0.596 4.05 10 pred big 9 0.9 10 ## # … with 38 more rows, and 1 more variable: post_mdn &lt;dbl&gt; For kicks and giggles, let’s use a FiveThirtyEight-like theme for our plots. An easy way to do so is with help from the ggthemes package. # install.packages(&quot;ggthemes&quot;, dependencies = T) library(ggthemes) Finally, here’s the ggplot2 code to reproduce Figure 12.1. post_mdn %&gt;% ggplot(aes(x = tank)) + geom_hline(yintercept = inv_logit_scaled(median(post$b_Intercept)), linetype = 2, size = 1/4) + geom_vline(xintercept = c(16.5, 32.5), size = 1/4) + geom_point(aes(y = propsurv), color = &quot;orange2&quot;) + geom_point(aes(y = post_mdn), shape = 1) + coord_cartesian(ylim = c(0, 1)) + scale_x_continuous(breaks = c(1, 16, 32, 48)) + labs(title = &quot;Multilevel shrinkage!&quot;, subtitle = &quot;The empirical proportions are in orange while the model-\\nimplied proportions are the black circles. The dashed line is\\nthe model-implied average survival proportion.&quot;) + annotate(&quot;text&quot;, x = c(8, 16 + 8, 32 + 8), y = 0, label = c(&quot;small tanks&quot;, &quot;medium tanks&quot;, &quot;large tanks&quot;)) + theme_fivethirtyeight() + theme(panel.grid = element_blank()) Here is our version of Figure 12.2.a. # this makes the output of `sample_n()` reproducible set.seed(12) post %&gt;% sample_n(100) %&gt;% expand(nesting(iter, b_Intercept, sd_tank__Intercept), x = seq(from = -4, to = 5, length.out = 100)) %&gt;% ggplot(aes(x = x, group = iter)) + geom_line(aes(y = dnorm(x, b_Intercept, sd_tank__Intercept)), alpha = .2, color = &quot;orange2&quot;) + labs(title = &quot;Population survival distribution&quot;, subtitle = &quot;The Gaussians are on the log-odds scale.&quot;) + scale_y_continuous(NULL, breaks = NULL) + coord_cartesian(xlim = c(-3, 4)) + theme_fivethirtyeight() + theme(plot.title = element_text(size = 13), plot.subtitle = element_text(size = 10)) Note the uncertainty in terms of both location \\(\\alpha\\) and scale \\(\\sigma\\). Now here’s the code for Figure 12.2.b. ggplot(data = post, aes(x = rnorm(n = nrow(post), mean = b_Intercept, sd = sd_tank__Intercept) %&gt;% inv_logit_scaled())) + geom_density(size = 0, fill = &quot;orange2&quot;) + scale_y_continuous(NULL, breaks = NULL) + ggtitle(&quot;Probability of survival&quot;) + theme_fivethirtyeight() Note how we sampled 12,000 imaginary tanks rather than McElreath’s 8,000. This is because we had 12,000 HMC iterations (i.e., execute nrow(post)). The aes() code, above, was a bit much. To get a sense of how it worked, consider this: set.seed(12) rnorm(n = 1, mean = post$b_Intercept, sd = post$sd_tank__Intercept) %&gt;% inv_logit_scaled() ## [1] 0.2135091 First, we took one random draw from a normal distribution with a mean of the first row in post$b_Intercept and a standard deviation of the value from the first row in post$sd_tank__Intercept, and passed it through the inv_logit_scaled() function. By replacing the 1 with nrow(post), we do this nrow(post) times (i.e., 12,000). Our orange density, then, is the summary of that process. 12.1.0.1 Overthinking: Prior for variance components. Yep, you can use the exponential distribution for your priors in brms. Here it is for model b12.2. b12.2.e &lt;- update(b12.2, prior = c(prior(normal(0, 1), class = Intercept), prior(exponential(1), class = sd))) The model summary: print(b12.2.e) ## Family: binomial ## Links: mu = logit ## Formula: surv | trials(density) ~ 1 + (1 | tank) ## Data: d (Number of observations: 48) ## Samples: 4 chains, each with iter = 4000; warmup = 2000; thin = 1; ## total post-warmup samples = 8000 ## ## Group-Level Effects: ## ~tank (Number of levels: 48) ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## sd(Intercept) 1.62 0.21 1.25 2.08 1985 1.00 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## Intercept 1.29 0.25 0.81 1.78 1276 1.00 ## ## Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample ## is a crude measure of effective sample size, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). If you’re curious how the exponential prior compares to the posterior, you might just plot. tibble(x = seq(from = 0, to = 6, by = .01)) %&gt;% ggplot() + # the prior geom_ribbon(aes(x = x, ymin = 0, ymax = dexp(x, rate = 1)), fill = &quot;orange2&quot;, alpha = 1/3) + # the posterior geom_density(data = posterior_samples(b12.2.e), aes(x = sd_tank__Intercept), fill = &quot;orange2&quot;, size = 0) + scale_y_continuous(NULL, breaks = NULL) + coord_cartesian(xlim = c(0, 5)) + labs(title = &quot;Bonus prior/posterior plot\\nfor sd_tank__Intercept&quot;, subtitle = &quot;The prior is the semitransparent ramp in the\\nbackground. The posterior is the solid orange\\nmound.&quot;) + theme_fivethirtyeight() 12.2 Varying effects and the underfitting/overfitting trade-off Varying intercepts are just regularized estimates, but adaptively regularized by estimating how diverse the clusters are while estimating the features of each cluster. This fact is not easy to grasp… A major benefit of using varying effects estimates, instead of the empirical raw estimates, is that they provide more accurate estimates of the individual cluster (tank) intercepts. On average, the varying effects actually provide a better estimate of the individual tank (cluster) means. The reason that the varying intercepts provides better estimates is that they do a better job trading off underfitting and overfitting. (p. 364) In this section, we explicate this by contrasting three perspectives: Complete pooling (i.e., a single-\\(\\alpha\\) model) No pooling (i.e., the single-level \\(\\alpha_{\\text{tank}_i}\\) model) Partial pooling (i.e., the multilevel model for which \\(\\alpha_{\\text{tank}} \\sim \\text{Normal} (\\alpha, \\sigma)\\)) To demonstrate [the magic of the multilevel model], we’ll simulate some tadpole data. That way, we’ll know the true per-pond survival probabilities. Then we can compare the no-pooling estimates to the partial pooling estimates, by computing how close each gets to the true values they are trying to estimate. The rest of this section shows how to do such a simulation. (p. 365) 12.2.1 The model. The simulation formula should look familiar. \\[ \\begin{eqnarray} \\text{surv}_i &amp; \\sim &amp; \\text{Binomial} (n_i, p_i) \\\\ \\text{logit} (p_i) &amp; = &amp; \\alpha_{\\text{pond}_i} \\\\ \\alpha_{\\text{pond}} &amp; \\sim &amp; \\text{Normal} (\\alpha, \\sigma) \\\\ \\alpha &amp; \\sim &amp; \\text{Normal} (0, 1) \\\\ \\sigma &amp; \\sim &amp; \\text{HalfCauchy} (0, 1) \\end{eqnarray} \\] 12.2.2 Assign values to the parameters. a &lt;- 1.4 sigma &lt;- 1.5 n_ponds &lt;- 60 set.seed(12) ( dsim &lt;- tibble(pond = 1:n_ponds, ni = rep(c(5, 10, 25, 35), each = n_ponds / 4) %&gt;% as.integer(), true_a = rnorm(n = n_ponds, mean = a, sd = sigma)) ) ## # A tibble: 60 x 3 ## pond ni true_a ## &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1 5 -0.821 ## 2 2 5 3.77 ## 3 3 5 -0.0351 ## 4 4 5 0.0200 ## 5 5 5 -1.60 ## 6 6 5 0.992 ## 7 7 5 0.927 ## 8 8 5 0.458 ## 9 9 5 1.24 ## 10 10 5 2.04 ## # … with 50 more rows 12.2.3 Sumulate survivors. Each pond \\(i\\) has \\(n_i\\) potential survivors, and nature flips each tadpole’s coin, so to speak, with probability of survival \\(p_i\\). This probability \\(p_i\\) is implied by the model definition, and is equal to: \\[p_i = \\frac{\\text{exp} (\\alpha_i)}{1 + \\text{exp} (\\alpha_i)}\\] The model uses a logit link, and so the probability is defined by the [inv_logit_scaled()] function. (p. 367) set.seed(12) ( dsim &lt;- dsim %&gt;% mutate(si = rbinom(n = n(), prob = inv_logit_scaled(true_a), size = ni)) ) ## # A tibble: 60 x 4 ## pond ni true_a si ## &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 1 5 -0.821 0 ## 2 2 5 3.77 5 ## 3 3 5 -0.0351 4 ## 4 4 5 0.0200 3 ## 5 5 5 -1.60 0 ## 6 6 5 0.992 5 ## 7 7 5 0.927 5 ## 8 8 5 0.458 3 ## 9 9 5 1.24 5 ## 10 10 5 2.04 5 ## # … with 50 more rows 12.2.4 Compute the no-pooling estimates. The no-pooling estimates (i.e., \\(\\alpha_{\\text{tank}_i}\\)) are the results of simple algebra. ( dsim &lt;- dsim %&gt;% mutate(p_nopool = si / ni) ) ## # A tibble: 60 x 5 ## pond ni true_a si p_nopool ## &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1 5 -0.821 0 0 ## 2 2 5 3.77 5 1 ## 3 3 5 -0.0351 4 0.8 ## 4 4 5 0.0200 3 0.6 ## 5 5 5 -1.60 0 0 ## 6 6 5 0.992 5 1 ## 7 7 5 0.927 5 1 ## 8 8 5 0.458 3 0.6 ## 9 9 5 1.24 5 1 ## 10 10 5 2.04 5 1 ## # … with 50 more rows “These are the same no-pooling estimates you’d get by fitting a model with a dummy variable for each pond and flat priors that induce no regularization” (p. 367). 12.2.5 Compute the partial-pooling estimates. To follow along with McElreath, set chains = 1, cores = 1 to fit with one chain. b12.3 &lt;- brm(data = dsim, family = binomial, si | trials(ni) ~ 1 + (1 | pond), prior = c(prior(normal(0, 1), class = Intercept), prior(cauchy(0, 1), class = sd)), iter = 10000, warmup = 1000, chains = 1, cores = 1, seed = 12) print(b12.3) ## Family: binomial ## Links: mu = logit ## Formula: si | trials(ni) ~ 1 + (1 | pond) ## Data: dsim (Number of observations: 60) ## Samples: 1 chains, each with iter = 10000; warmup = 1000; thin = 1; ## total post-warmup samples = 9000 ## ## Group-Level Effects: ## ~pond (Number of levels: 60) ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## sd(Intercept) 1.30 0.19 0.97 1.71 2948 1.00 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## Intercept 1.28 0.20 0.90 1.67 2996 1.00 ## ## Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample ## is a crude measure of effective sample size, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). I’m not aware that you can use McElreath’s depth=2 trick in brms for summary() or print(). But can get that information with the coef() function. coef(b12.3)$pond[c(1:2, 59:60), , ] %&gt;% round(digits = 2) ## Estimate Est.Error Q2.5 Q97.5 ## 1 -1.07 0.89 -3.03 0.54 ## 2 2.30 1.02 0.51 4.54 ## 59 0.97 0.37 0.27 1.72 ## 60 1.42 0.41 0.65 2.29 Note how we just peeked at the top and bottom two rows with the c(1:2, 59:60) part of the code, there. Somewhat discouragingly, coef() doesn’t return the ‘Eff.Sample’ or ‘Rhat’ columns as in McElreath’s output. We can still extract that information, though. For \\(\\hat{R}\\), the solution is simple; use the brms::rhat() function. rhat(b12.3) ## b_Intercept sd_pond__Intercept r_pond[1,Intercept] ## 1.0002418 0.9999371 0.9999115 ## r_pond[2,Intercept] r_pond[3,Intercept] r_pond[4,Intercept] ## 1.0002275 0.9998903 0.9999139 ## r_pond[5,Intercept] r_pond[6,Intercept] r_pond[7,Intercept] ## 0.9999526 0.9998954 1.0002992 ## r_pond[8,Intercept] r_pond[9,Intercept] r_pond[10,Intercept] ## 1.0000516 0.9999460 0.9999920 ## r_pond[11,Intercept] r_pond[12,Intercept] r_pond[13,Intercept] ## 0.9999889 0.9999319 0.9999591 ## r_pond[14,Intercept] r_pond[15,Intercept] r_pond[16,Intercept] ## 0.9999101 1.0001250 0.9999149 ## r_pond[17,Intercept] r_pond[18,Intercept] r_pond[19,Intercept] ## 0.9999016 0.9999239 0.9998892 ## r_pond[20,Intercept] r_pond[21,Intercept] r_pond[22,Intercept] ## 0.9998931 0.9998939 0.9998921 ## r_pond[23,Intercept] r_pond[24,Intercept] r_pond[25,Intercept] ## 0.9998933 0.9998986 0.9999875 ## r_pond[26,Intercept] r_pond[27,Intercept] r_pond[28,Intercept] ## 0.9999691 0.9999052 0.9998893 ## r_pond[29,Intercept] r_pond[30,Intercept] r_pond[31,Intercept] ## 0.9999064 1.0000005 1.0000856 ## r_pond[32,Intercept] r_pond[33,Intercept] r_pond[34,Intercept] ## 0.9998893 0.9998950 0.9999871 ## r_pond[35,Intercept] r_pond[36,Intercept] r_pond[37,Intercept] ## 0.9999385 1.0000467 0.9998907 ## r_pond[38,Intercept] r_pond[39,Intercept] r_pond[40,Intercept] ## 0.9999261 0.9999002 0.9999136 ## r_pond[41,Intercept] r_pond[42,Intercept] r_pond[43,Intercept] ## 0.9999024 0.9998960 0.9999817 ## r_pond[44,Intercept] r_pond[45,Intercept] r_pond[46,Intercept] ## 1.0000738 1.0000156 1.0000022 ## r_pond[47,Intercept] r_pond[48,Intercept] r_pond[49,Intercept] ## 0.9999479 0.9999159 0.9999162 ## r_pond[50,Intercept] r_pond[51,Intercept] r_pond[52,Intercept] ## 0.9998972 0.9998896 0.9999483 ## r_pond[53,Intercept] r_pond[54,Intercept] r_pond[55,Intercept] ## 0.9999232 0.9999950 0.9999233 ## r_pond[56,Intercept] r_pond[57,Intercept] r_pond[58,Intercept] ## 0.9998901 0.9999382 0.9999012 ## r_pond[59,Intercept] r_pond[60,Intercept] lp__ ## 0.9999175 0.9998905 0.9999222 Extracting the ‘Eff.Sample’ values is a little more complicated. There is no effsamples() function. However, we do have neff_ratio(). neff_ratio(b12.3) ## b_Intercept sd_pond__Intercept r_pond[1,Intercept] ## 0.3328983 0.3276092 1.3086470 ## r_pond[2,Intercept] r_pond[3,Intercept] r_pond[4,Intercept] ## 1.4222957 1.7287578 1.7931600 ## r_pond[5,Intercept] r_pond[6,Intercept] r_pond[7,Intercept] ## 1.5172159 1.7087264 1.4415308 ## r_pond[8,Intercept] r_pond[9,Intercept] r_pond[10,Intercept] ## 1.6367495 1.5541417 1.5271929 ## r_pond[11,Intercept] r_pond[12,Intercept] r_pond[13,Intercept] ## 1.5474498 1.8682911 1.7837498 ## r_pond[14,Intercept] r_pond[15,Intercept] r_pond[16,Intercept] ## 1.8735102 1.6606211 1.4500515 ## r_pond[17,Intercept] r_pond[18,Intercept] r_pond[19,Intercept] ## 1.3307980 1.4573910 1.4950252 ## r_pond[20,Intercept] r_pond[21,Intercept] r_pond[22,Intercept] ## 1.4288447 1.4943737 1.3833042 ## r_pond[23,Intercept] r_pond[24,Intercept] r_pond[25,Intercept] ## 1.3976878 1.3691378 1.3661559 ## r_pond[26,Intercept] r_pond[27,Intercept] r_pond[28,Intercept] ## 1.6933039 1.3845310 1.7058099 ## r_pond[29,Intercept] r_pond[30,Intercept] r_pond[31,Intercept] ## 1.7976571 1.6092142 1.2267648 ## r_pond[32,Intercept] r_pond[33,Intercept] r_pond[34,Intercept] ## 1.2972673 1.0352256 0.9503992 ## r_pond[35,Intercept] r_pond[36,Intercept] r_pond[37,Intercept] ## 0.9909477 0.9580389 1.1905664 ## r_pond[38,Intercept] r_pond[39,Intercept] r_pond[40,Intercept] ## 1.0429481 1.3957889 1.1026741 ## r_pond[41,Intercept] r_pond[42,Intercept] r_pond[43,Intercept] ## 1.1539322 0.9819976 1.0965749 ## r_pond[44,Intercept] r_pond[45,Intercept] r_pond[46,Intercept] ## 1.1089698 0.9528173 1.1863659 ## r_pond[47,Intercept] r_pond[48,Intercept] r_pond[49,Intercept] ## 0.9622555 1.0673472 1.3589549 ## r_pond[50,Intercept] r_pond[51,Intercept] r_pond[52,Intercept] ## 0.8415543 0.9910013 0.9237361 ## r_pond[53,Intercept] r_pond[54,Intercept] r_pond[55,Intercept] ## 1.2107973 1.1505275 0.8304270 ## r_pond[56,Intercept] r_pond[57,Intercept] r_pond[58,Intercept] ## 1.0743924 1.1347820 0.8837469 ## r_pond[59,Intercept] r_pond[60,Intercept] lp__ ## 0.8612560 0.9822023 0.1988217 The brms::neff_ratio() function returns ratios of the effective samples over the total number of post-warmup iterations. So if we know the neff_ratio() values and the number of post-warmup iterations, the ‘Eff.Sample’ values are just a little algebra away. A quick solution is to look at the ‘total post-warmup samples’ line at the top of our print() output. Another way is to extract that information from our brm() fit object. I’m not aware of a way to do that directly, but we can extract the iter value (i.e., b12.2$fit@sim$iter), the warmup value (i.e., b12.2$fit@sim$warmup), and the number of chains (i.e., b12.2$fit@sim$chains). With those values in hand, simple algebra will return the ‘total post-warmup samples’ value. E.g., (n_iter &lt;- (b12.3$fit@sim$iter - b12.3$fit@sim$warmup) * b12.3$fit@sim$chains) ## [1] 9000 And now we have n_iter, we can calculate the ‘Eff.Sample’ values. neff_ratio(b12.3) %&gt;% data.frame() %&gt;% rownames_to_column() %&gt;% set_names(&quot;parameter&quot;, &quot;neff_ratio&quot;) %&gt;% mutate(eff_sample = (neff_ratio * n_iter) %&gt;% round(digits = 0)) %&gt;% head() ## parameter neff_ratio eff_sample ## 1 b_Intercept 0.3328983 2996 ## 2 sd_pond__Intercept 0.3276092 2948 ## 3 r_pond[1,Intercept] 1.3086470 11778 ## 4 r_pond[2,Intercept] 1.4222957 12801 ## 5 r_pond[3,Intercept] 1.7287578 15559 ## 6 r_pond[4,Intercept] 1.7931600 16138 Digressions aside, let’s get ready for the diagnostic plot of Figure 12.3. dsim %&gt;% glimpse() ## Observations: 60 ## Variables: 5 ## $ pond &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, … ## $ ni &lt;int&gt; 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10… ## $ true_a &lt;dbl&gt; -0.82085139, 3.76575421, -0.03511672, 0.01999213, -1.59… ## $ si &lt;int&gt; 0, 5, 4, 3, 0, 5, 5, 3, 5, 5, 3, 3, 3, 4, 4, 6, 10, 9, … ## $ p_nopool &lt;dbl&gt; 0.0, 1.0, 0.8, 0.6, 0.0, 1.0, 1.0, 0.6, 1.0, 1.0, 0.6, … # we could have included this step in the block of code below, if we wanted to p_partpool &lt;- coef(b12.3)$pond[, , ] %&gt;% as_tibble() %&gt;% transmute(p_partpool = inv_logit_scaled(Estimate)) dsim &lt;- dsim %&gt;% bind_cols(p_partpool) %&gt;% mutate(p_true = inv_logit_scaled(true_a)) %&gt;% mutate(nopool_error = abs(p_nopool - p_true), partpool_error = abs(p_partpool - p_true)) dsim %&gt;% glimpse() ## Observations: 60 ## Variables: 9 ## $ pond &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15… ## $ ni &lt;int&gt; 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, … ## $ true_a &lt;dbl&gt; -0.82085139, 3.76575421, -0.03511672, 0.01999213,… ## $ si &lt;int&gt; 0, 5, 4, 3, 0, 5, 5, 3, 5, 5, 3, 3, 3, 4, 4, 6, 1… ## $ p_nopool &lt;dbl&gt; 0.0, 1.0, 0.8, 0.6, 0.0, 1.0, 1.0, 0.6, 1.0, 1.0,… ## $ p_partpool &lt;dbl&gt; 0.2548519, 0.9089353, 0.8096274, 0.6809599, 0.254… ## $ p_true &lt;dbl&gt; 0.3055830, 0.9773737, 0.4912217, 0.5049979, 0.168… ## $ nopool_error &lt;dbl&gt; 0.305582963, 0.022626343, 0.308778278, 0.09500213… ## $ partpool_error &lt;dbl&gt; 0.050731032, 0.068438323, 0.318405689, 0.17596206… Here is our code for Figure 12.3. The extra data processing for dfline is how we get the values necessary for the horizontal summary lines. dfline &lt;- dsim %&gt;% select(ni, nopool_error:partpool_error) %&gt;% gather(key, value, -ni) %&gt;% group_by(key, ni) %&gt;% summarise(mean_error = mean(value)) %&gt;% mutate(x = c( 1, 16, 31, 46), xend = c(15, 30, 45, 60)) dsim %&gt;% ggplot(aes(x = pond)) + geom_vline(xintercept = c(15.5, 30.5, 45.4), color = &quot;white&quot;, size = 2/3) + geom_point(aes(y = nopool_error), color = &quot;orange2&quot;) + geom_point(aes(y = partpool_error), shape = 1) + geom_segment(data = dfline, aes(x = x, xend = xend, y = mean_error, yend = mean_error), color = rep(c(&quot;orange2&quot;, &quot;black&quot;), each = 4), linetype = rep(1:2, each = 4)) + scale_x_continuous(breaks = c(1, 10, 20, 30, 40, 50, 60)) + annotate(&quot;text&quot;, x = c(15 - 7.5, 30 - 7.5, 45 - 7.5, 60 - 7.5), y = .45, label = c(&quot;tiny (5)&quot;, &quot;small (10)&quot;, &quot;medium (25)&quot;, &quot;large (35)&quot;)) + labs(y = &quot;absolute error&quot;, title = &quot;Estimate error by model type&quot;, subtitle = &quot;The horizontal axis displays pond number. The vertical axis measures\\nthe absolute error in the predicted proportion of survivors, compared to\\nthe true value used in the simulation. The higher the point, the worse\\nthe estimate. No-pooling shown in orange. Partial pooling shown in black.\\nThe orange and dashed black lines show the average error for each kind\\nof estimate, across each initial density of tadpoles (pond size). Smaller\\nponds produce more error, but the partial pooling estimates are better\\non average, especially in smaller ponds.&quot;) + theme_fivethirtyeight() + theme(panel.grid = element_blank(), plot.subtitle = element_text(size = 10)) If you wanted to quantify the difference in simple summaries, you might do something like this: dsim %&gt;% select(ni, nopool_error:partpool_error) %&gt;% gather(key, value, -ni) %&gt;% group_by(key) %&gt;% summarise(mean_error = mean(value) %&gt;% round(digits = 3), median_error = median(value) %&gt;% round(digits = 3)) ## # A tibble: 2 x 3 ## key mean_error median_error ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 nopool_error 0.078 0.05 ## 2 partpool_error 0.067 0.051 I originally learned about the multilevel in order to work with longitudinal data. In that context, I found the basic principles of a multilevel structure quite intuitive. The concept of partial pooling, however, took me some time to wrap my head around. If you’re struggling with this, be patient and keep chipping away. When McElreath lectured on this topic in 2015, he traced partial pooling to statistician Charles M. Stein. In 1977, Efron and Morris wrote the now classic paper, Stein’s Paradox in Statistics, which does a nice job breaking down why partial pooling can be so powerful. One of the primary examples they used in the paper was of 1970 batting average data. If you’d like more practice seeing how partial pooling works–or if you just like baseball–, check out my project on that example, James-Stein and Bayesian partial pooling. 12.2.5.1 Overthinking: Repeating the pond simulation. Within the brms workflow, we can reuse a compiled model with update(). But first, we’ll simulate new data. a &lt;- 1.4 sigma &lt;- 1.5 n_ponds &lt;- 60 set.seed(1999) # for new data, set a new seed new_dsim &lt;- tibble(pond = 1:n_ponds, ni = rep(c(5, 10, 25, 35), each = n_ponds / 4) %&gt;% as.integer(), true_a = rnorm(n = n_ponds, mean = a, sd = sigma)) %&gt;% mutate(si = rbinom(n = n(), prob = inv_logit_scaled(true_a), size = ni)) %&gt;% mutate(p_nopool = si / ni) glimpse(new_dsim) ## Observations: 60 ## Variables: 5 ## $ pond &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, … ## $ ni &lt;int&gt; 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10… ## $ true_a &lt;dbl&gt; 2.4990087, 1.3432554, 3.2045137, 3.6047030, 1.6005354, … ## $ si &lt;int&gt; 4, 4, 5, 4, 4, 4, 2, 4, 3, 5, 4, 5, 2, 2, 5, 10, 7, 10,… ## $ p_nopool &lt;dbl&gt; 0.8, 0.8, 1.0, 0.8, 0.8, 0.8, 0.4, 0.8, 0.6, 1.0, 0.8, … Fit the new model. b12.3_new &lt;- update(b12.3, newdata = new_dsim, iter = 10000, warmup = 1000, chains = 1, cores = 1) print(b12.3_new) ## Family: binomial ## Links: mu = logit ## Formula: si | trials(ni) ~ 1 + (1 | pond) ## Data: new_dsim (Number of observations: 60) ## Samples: 1 chains, each with iter = 10000; warmup = 1000; thin = 1; ## total post-warmup samples = 9000 ## ## Group-Level Effects: ## ~pond (Number of levels: 60) ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## sd(Intercept) 1.16 0.16 0.89 1.50 3291 1.00 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## Intercept 1.14 0.18 0.80 1.49 4660 1.00 ## ## Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample ## is a crude measure of effective sample size, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). Why not plot the first simulation versus the second one? bind_rows(posterior_samples(b12.3), posterior_samples(b12.3_new)) %&gt;% mutate(model = rep(c(&quot;b12.3&quot;, &quot;b12.3_new&quot;), each = n() / 2)) %&gt;% ggplot(aes(x = b_Intercept, y = sd_pond__Intercept)) + stat_density_2d(geom = &quot;raster&quot;, aes(fill = stat(density)), contour = F, n = 200) + geom_vline(xintercept = a, color = &quot;orange3&quot;, linetype = 3) + geom_hline(yintercept = sigma, color = &quot;orange3&quot;, linetype = 3) + scale_fill_gradient(low = &quot;grey25&quot;, high = &quot;orange3&quot;) + ggtitle(&quot;Our simulation posteriors contrast a bit&quot;, subtitle = expression(paste(alpha, &quot; is on the x and &quot;, sigma, &quot; is on the y, both in log-odds. The dotted lines intersect at the true values.&quot;))) + coord_cartesian(xlim = c(.7, 2), ylim = c(.8, 1.9)) + theme_fivethirtyeight() + theme(legend.position = &quot;none&quot;, panel.grid = element_blank()) + facet_wrap(~model, ncol = 2) If you’d like the stanfit portion of your brm() object, subset with $fit. Take b12.3, for example. You might check out its structure via b12.3$fit %&gt;% str(). Here’s the actual Stan code. b12.3$fit@ stanmodel ## S4 class stanmodel &#39;e57042e640ec9cd4c321d064bf9ac5e3&#39; coded as follows: ## // generated with brms 2.8.0 ## functions { ## } ## data { ## int&lt;lower=1&gt; N; // number of observations ## int Y[N]; // response variable ## int trials[N]; // number of trials ## // data for group-level effects of ID 1 ## int&lt;lower=1&gt; N_1; ## int&lt;lower=1&gt; M_1; ## int&lt;lower=1&gt; J_1[N]; ## vector[N] Z_1_1; ## int prior_only; // should the likelihood be ignored? ## } ## transformed data { ## } ## parameters { ## real temp_Intercept; // temporary intercept ## vector&lt;lower=0&gt;[M_1] sd_1; // group-level standard deviations ## vector[N_1] z_1[M_1]; // unscaled group-level effects ## } ## transformed parameters { ## // group-level effects ## vector[N_1] r_1_1 = (sd_1[1] * (z_1[1])); ## } ## model { ## vector[N] mu = temp_Intercept + rep_vector(0, N); ## for (n in 1:N) { ## mu[n] += r_1_1[J_1[n]] * Z_1_1[n]; ## } ## // priors including all constants ## target += normal_lpdf(temp_Intercept | 0, 1); ## target += cauchy_lpdf(sd_1 | 0, 1) ## - 1 * cauchy_lccdf(0 | 0, 1); ## target += normal_lpdf(z_1[1] | 0, 1); ## // likelihood including all constants ## if (!prior_only) { ## target += binomial_logit_lpmf(Y | trials, mu); ## } ## } ## generated quantities { ## // actual population-level intercept ## real b_Intercept = temp_Intercept; ## } ## And you can get the data of a given brm() fit object like so. b12.3$data %&gt;% head() ## si ni pond ## 1 0 5 1 ## 2 5 5 2 ## 3 4 5 3 ## 4 3 5 4 ## 5 0 5 5 ## 6 5 5 6 12.3 More than one type of cluster “We can use and often should use more than one type of cluster in the same model” (p. 370). 12.3.1 Multilevel chimpanzees. The initial multilevel update from model b10.4 from the last chapter follows the statistical formula \\[ \\begin{eqnarray} \\text{left_pull}_i &amp; \\sim &amp; \\text{Binomial} (n_i = 1, p_i) \\\\ \\text{logit} (p_i) &amp; = &amp; \\alpha + \\alpha_{\\text{actor}_i} + (\\beta_1 + \\beta_2 \\text{condition}_i) \\text{prosoc_left}_i \\\\ \\alpha_{\\text{actor}} &amp; \\sim &amp; \\text{Normal} (0, \\sigma_{\\text{actor}}) \\\\ \\alpha &amp; \\sim &amp; \\text{Normal} (0, 10) \\\\ \\beta_1 &amp; \\sim &amp; \\text{Normal} (0, 10) \\\\ \\beta_2 &amp; \\sim &amp; \\text{Normal} (0, 10) \\\\ \\sigma_{\\text{actor}} &amp; \\sim &amp; \\text{HalfCauchy} (0, 1) \\end{eqnarray} \\] Notice that \\(\\alpha\\) is inside the linear model, not inside the Gaussian prior for \\(\\alpha_\\text{actor}\\). This is mathematically equivalent to what [we] did with the tadpoles earlier in the chapter. You can always take the mean out of a Gaussian distribution and treat that distribution as a constant plus a Gaussian distribution centered on zero. This might seem a little weird at first, so it might help train your intuition by experimenting in R. (p. 371) Behold our two identical Gaussians in a tidy tibble. set.seed(12) two_gaussians &lt;- tibble(y1 = rnorm(n = 1e4, mean = 10, sd = 1), y2 = 10 + rnorm(n = 1e4, mean = 0, sd = 1)) Let’s follow McElreath’s advice to make sure they are same by superimposing the density of one on the other. two_gaussians %&gt;% ggplot() + geom_density(aes(x = y1), size = 0, fill = &quot;orange1&quot;, alpha = 1/3) + geom_density(aes(x = y2), size = 0, fill = &quot;orange4&quot;, alpha = 1/3) + scale_y_continuous(NULL, breaks = NULL) + labs(title = &quot;Our simulated Gaussians&quot;) + theme_fivethirtyeight() Yep, those Gaussians look about the same. Let’s get the chimpanzees data from rethinking. library(rethinking) data(chimpanzees) d &lt;- chimpanzees Detach rethinking and reload brms. rm(chimpanzees) detach(package:rethinking, unload = T) library(brms) For our brms model with varying intercepts for actor but not block, we employ the pulled_left ~ 1 + ... + (1 | actor) syntax, specifically omitting a (1 | block) section. b12.4 &lt;- brm(data = d, family = binomial, pulled_left | trials(1) ~ 1 + prosoc_left + prosoc_left:condition + (1 | actor), prior = c(prior(normal(0, 10), class = Intercept), prior(normal(0, 10), class = b), prior(cauchy(0, 1), class = sd)), iter = 5000, warmup = 1000, chains = 4, cores = 4, # I&#39;m using 4 cores, instead of the `cores=3` in McElreath&#39;s code control = list(adapt_delta = 0.95), seed = 12) The initial solutions came with a few divergent transitions. Increasing adapt_delta to 0.95 solved the problem. You can also solve the problem with more strongly regularizing priors such as normal(0, 2) on the intercept and slope parameters (see recommendations from the Stan team). Consider trying both methods and comparing the results. They’re similar. Here we add the actor-level deviations to the fixed intercept, the grand mean. post &lt;- posterior_samples(b12.4) post %&gt;% select(starts_with(&quot;r_actor&quot;)) %&gt;% gather() %&gt;% # this is how we might add the grand mean to the actor-level deviations mutate(value = value + post$b_Intercept) %&gt;% group_by(key) %&gt;% summarise(mean = mean(value) %&gt;% round(digits = 2)) ## # A tibble: 7 x 2 ## key mean ## &lt;chr&gt; &lt;dbl&gt; ## 1 r_actor[1,Intercept] -0.71 ## 2 r_actor[2,Intercept] 4.6 ## 3 r_actor[3,Intercept] -1.02 ## 4 r_actor[4,Intercept] -1.02 ## 5 r_actor[5,Intercept] -0.71 ## 6 r_actor[6,Intercept] 0.23 ## 7 r_actor[7,Intercept] 1.76 Here’s another way to get at the same information, this time using coef() and a little formatting help from the stringr::str_c() function. Just for kicks, we’ll throw in the 95% intervals, too. coef(b12.4)$actor[, c(1, 3:4), 1] %&gt;% as_tibble() %&gt;% round(digits = 2) %&gt;% # here we put the credible intervals in an APA-6-style format mutate(`95% CIs` = str_c(&quot;[&quot;, Q2.5, &quot;, &quot;, Q97.5, &quot;]&quot;), actor = str_c(&quot;chimp #&quot;, 1:7)) %&gt;% rename(mean = Estimate) %&gt;% select(actor, mean, `95% CIs`) %&gt;% knitr::kable() actor mean 95% CIs chimp #1 -0.71 [-1.24, -0.2] chimp #2 4.60 [2.54, 8.49] chimp #3 -1.02 [-1.57, -0.48] chimp #4 -1.02 [-1.57, -0.49] chimp #5 -0.71 [-1.23, -0.21] chimp #6 0.23 [-0.29, 0.77] chimp #7 1.76 [1.06, 2.54] If you prefer the posterior median to the mean, just add a robust = T argument inside the coef() function. 12.3.2 Two types of cluster. The full statistical model follows the form \\[\\begin{eqnarray} \\text{left_pull}_i &amp; \\sim &amp; \\text{Binomial} (n_i = 1, p_i) \\\\ \\text{logit} (p_i) &amp; = &amp; \\alpha + \\alpha_{\\text{actor}_i} + \\alpha_{\\text{block}_i} + (\\beta_1 + \\beta_2 \\text{condition}_i) \\text{prosoc_left}_i \\\\ \\alpha_{\\text{actor}} &amp; \\sim &amp; \\text{Normal} (0, \\sigma_{\\text{actor}}) \\\\ \\alpha_{\\text{block}} &amp; \\sim &amp; \\text{Normal} (0, \\sigma_{\\text{actor}}) \\\\ \\alpha &amp; \\sim &amp; \\text{Normal} (0, 10) \\\\ \\beta_1 &amp; \\sim &amp; \\text{Normal} (0, 10) \\\\ \\beta_2 &amp; \\sim &amp; \\text{Normal} (0, 10) \\\\ \\sigma_{\\text{actor}} &amp; \\sim &amp; \\text{HalfCauchy} (0, 1) \\\\ \\sigma_{\\text{block}} &amp; \\sim &amp; \\text{HalfCauchy} (0, 1) \\end{eqnarray}\\] Our brms model with varying intercepts for both actor and block now employs the ... (1 | actor) + (1 | block) syntax. b12.5 &lt;- update(b12.4, newdata = d, formula = pulled_left | trials(1) ~ 1 + prosoc_left + prosoc_left:condition + (1 | actor) + (1 | block), iter = 6000, warmup = 1000, cores = 4, chains = 4, control = list(adapt_delta = 0.99), seed = 12) This time we increased adapt_delta to 0.99 to avoid divergent transitions. We can look at the primary coefficients with print(). McElreath encouraged us to inspect the trace plots. Here they are. library(bayesplot) color_scheme_set(&quot;orange&quot;) post &lt;- posterior_samples(b12.5, add_chain = T) post %&gt;% select(-lp__, -iter) %&gt;% mcmc_trace(facet_args = list(ncol = 4)) + scale_x_continuous(breaks = c(0, 2500, 5000)) + theme_fivethirtyeight() + theme(legend.position = c(.75, .06)) The trace plots look great. We may as well examine the \\(n_\\text{eff} / N\\) ratios, too. neff_ratio(b12.5) %&gt;% mcmc_neff() + theme_fivethirtyeight() About half of them are lower than we might like, but none are in the embarrassing \\(n_\\text{eff} / N \\leq .1\\) range. Let’s look at the summary of the main parameters. print(b12.5) ## Family: binomial ## Links: mu = logit ## Formula: pulled_left | trials(1) ~ prosoc_left + (1 | actor) + (1 | block) + prosoc_left:condition ## Data: d (Number of observations: 504) ## Samples: 4 chains, each with iter = 6000; warmup = 1000; thin = 1; ## total post-warmup samples = 20000 ## ## Group-Level Effects: ## ~actor (Number of levels: 7) ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## sd(Intercept) 2.27 0.97 1.13 4.63 5171 1.00 ## ## ~block (Number of levels: 6) ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## sd(Intercept) 0.22 0.18 0.01 0.66 8624 1.00 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## Intercept 0.43 0.99 -1.39 2.47 4251 1.00 ## prosoc_left 0.83 0.26 0.31 1.35 16813 1.00 ## prosoc_left:condition -0.14 0.30 -0.73 0.45 16285 1.00 ## ## Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample ## is a crude measure of effective sample size, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). This time, we’ll need to use brms::ranef() to get those depth=2-type estimates in the same metric displayed in the text. With ranef(), you get the group-specific estimates in a deviance metric. The coef() function, in contrast, yields the group-specific estimates in what you might call the natural metric. We’ll get more language for this in the next chapter. ranef(b12.5)$actor[, , &quot;Intercept&quot;] %&gt;% round(digits = 2) ## Estimate Est.Error Q2.5 Q97.5 ## 1 -1.15 1.00 -3.24 0.68 ## 2 4.21 1.72 1.78 8.14 ## 3 -1.46 1.00 -3.54 0.37 ## 4 -1.46 1.00 -3.54 0.36 ## 5 -1.15 1.00 -3.21 0.65 ## 6 -0.20 1.00 -2.29 1.64 ## 7 1.34 1.02 -0.74 3.24 ranef(b12.5)$block[, , &quot;Intercept&quot;] %&gt;% round(digits = 2) ## Estimate Est.Error Q2.5 Q97.5 ## 1 -0.18 0.23 -0.74 0.12 ## 2 0.04 0.19 -0.33 0.45 ## 3 0.05 0.19 -0.30 0.48 ## 4 0.00 0.18 -0.38 0.40 ## 5 -0.04 0.18 -0.46 0.32 ## 6 0.11 0.20 -0.21 0.59 We might make the coefficient plot of Figure 12.4.a like this: stanplot(b12.5, pars = c(&quot;^r_&quot;, &quot;^b_&quot;, &quot;^sd_&quot;)) + theme_fivethirtyeight() + theme(axis.text.y = element_text(hjust = 0)) Once we get the posterior samples, it’s easy to compare the random variances as in Figure 12.4.b. post %&gt;% ggplot(aes(x = sd_actor__Intercept)) + geom_density(size = 0, fill = &quot;orange1&quot;, alpha = 3/4) + geom_density(aes(x = sd_block__Intercept), size = 0, fill = &quot;orange4&quot;, alpha = 3/4) + scale_y_continuous(NULL, breaks = NULL) + coord_cartesian(xlim = c(0, 4)) + labs(title = expression(sigma)) + annotate(&quot;text&quot;, x = 2/3, y = 2, label = &quot;block&quot;, color = &quot;orange4&quot;) + annotate(&quot;text&quot;, x = 2, y = 3/4, label = &quot;actor&quot;, color = &quot;orange1&quot;) + theme_fivethirtyeight() We might compare our models by their PSIS-LOO values. b12.4 &lt;- add_criterion(b12.4, &quot;loo&quot;) b12.5 &lt;- add_criterion(b12.5, &quot;loo&quot;) loo_compare(b12.4, b12.5) %&gt;% print(simplify = F) ## elpd_diff se_diff elpd_loo se_elpd_loo p_loo se_p_loo looic ## b12.4 0.0 0.0 -265.7 9.8 8.1 0.4 531.4 ## b12.5 -0.6 0.9 -266.3 9.9 10.4 0.5 532.6 ## se_looic ## b12.4 19.5 ## b12.5 19.7 The two models yield nearly-equivalent information criteria values. Yet recall what McElreath wrote: “There is nothing to gain here by selecting either model. The comparison of the two models tells a richer story” (p. 367). 12.4 Multilevel posterior predictions … producing implied predictions from a fit model, is very helpful for understanding what the model means. Every model is a merger of sense and nonsense. When we understand a model, we can find its sense and control its nonsense. But as models get more complex, it is very difficult to impossible to understand them just by inspecting tables of posterior means and intervals. Exploring implied posterior predictions helps much more… … The introduction of varying effects does introduce nuance, however. First, we should no longer expect the model to exactly retrodict the sample, because adaptive regularization has as its goal to trade off poorer fit in sample for better inference and hopefully better fit out of sample. This is what shrinkage does for us… Second, “prediction” in the context of a multilevel model requires additional choices. If we wish to validate a model against the specific clusters used to fit the model, that is one thing. But if we instead wish to compute predictions for new clusters, other than the one observed in the sample, that is quite another. We’ll consider each of these in turn, continuing to use the chimpanzees model from the previous section. (p. 376) 12.4.1 Posterior prediction for same clusters. Like McElreath did in the text, we’ll do this two ways. Recall we use brms::fitted() in place of rethinking::link(). chimp &lt;- 2 nd &lt;- tibble(prosoc_left = c(0, 1, 0, 1), condition = c(0, 0, 1, 1), actor = chimp) ( chimp_2_fitted &lt;- fitted(b12.4, newdata = nd) %&gt;% as_tibble() %&gt;% mutate(condition = factor(c(&quot;0/0&quot;, &quot;1/0&quot;, &quot;0/1&quot;, &quot;1/1&quot;), levels = c(&quot;0/0&quot;, &quot;1/0&quot;, &quot;0/1&quot;, &quot;1/1&quot;))) ) ## # A tibble: 4 x 5 ## Estimate Est.Error Q2.5 Q97.5 condition ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 0.980 0.0198 0.927 1.000 0/0 ## 2 0.991 0.00963 0.965 1.000 1/0 ## 3 0.980 0.0198 0.927 1.000 0/1 ## 4 0.990 0.0109 0.960 1.000 1/1 ( chimp_2_d &lt;- d %&gt;% filter(actor == chimp) %&gt;% group_by(prosoc_left, condition) %&gt;% summarise(prob = mean(pulled_left)) %&gt;% ungroup() %&gt;% mutate(condition = str_c(prosoc_left, &quot;/&quot;, condition)) %&gt;% mutate(condition = factor(condition, levels = c(&quot;0/0&quot;, &quot;1/0&quot;, &quot;0/1&quot;, &quot;1/1&quot;))) ) ## # A tibble: 4 x 3 ## prosoc_left condition prob ## &lt;int&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 0 0/0 1 ## 2 0 0/1 1 ## 3 1 1/0 1 ## 4 1 1/1 1 McElreath didn’t show the corresponding plot in the text. It might look like this. chimp_2_fitted %&gt;% # if you want to use `geom_line()` or `geom_ribbon()` with a factor on the x axis, # you need to code something like `group = 1` in `aes()` ggplot(aes(x = condition, y = Estimate, group = 1)) + geom_ribbon(aes(ymin = Q2.5, ymax = Q97.5), fill = &quot;orange1&quot;) + geom_line(color = &quot;blue&quot;) + geom_point(data = chimp_2_d, aes(y = prob), color = &quot;grey25&quot;) + ggtitle(&quot;Chimp #2&quot;, subtitle = &quot;The posterior mean and 95%\\nintervals are the blue line\\nand orange band, respectively.\\nThe empirical means are\\nthe charcoal dots.&quot;) + coord_cartesian(ylim = c(.75, 1)) + theme_fivethirtyeight() + theme(plot.subtitle = element_text(size = 10)) Do note how severely we’ve restricted the y-axis range. But okay, now let’s do things by hand. We’ll need to extract the posterior samples and look at the structure of the data. post &lt;- posterior_samples(b12.4) glimpse(post) ## Observations: 16,000 ## Variables: 12 ## $ b_Intercept &lt;dbl&gt; -0.49845428, 0.36263851, 1.91766750, 1… ## $ b_prosoc_left &lt;dbl&gt; 0.9032174, 1.3799669, 0.8727582, 0.801… ## $ `b_prosoc_left:condition` &lt;dbl&gt; -0.56182114, -0.46722870, -0.70816999,… ## $ sd_actor__Intercept &lt;dbl&gt; 2.571271, 1.476708, 2.084258, 2.729417… ## $ `r_actor[1,Intercept]` &lt;dbl&gt; -0.468006872, -1.364675261, -2.4033949… ## $ `r_actor[2,Intercept]` &lt;dbl&gt; 5.533991, 2.910396, 5.437039, 4.342981… ## $ `r_actor[3,Intercept]` &lt;dbl&gt; -0.45618115, -1.59925747, -2.81698107,… ## $ `r_actor[4,Intercept]` &lt;dbl&gt; -0.65347198, -1.77826745, -2.54650655,… ## $ `r_actor[5,Intercept]` &lt;dbl&gt; -0.3303643, -1.3395610, -2.4678893, -2… ## $ `r_actor[6,Intercept]` &lt;dbl&gt; 0.56380900, -0.67941570, -1.10245504, … ## $ `r_actor[7,Intercept]` &lt;dbl&gt; 2.0842292, 1.6935043, -0.5287177, 0.49… ## $ lp__ &lt;dbl&gt; -280.4227, -284.5651, -286.6607, -281.… McElreath didn’t show what his R code 12.29 dens( post$a_actor[,5] ) would look like. But here’s our analogue. post %&gt;% transmute(actor_5 = `r_actor[5,Intercept]`) %&gt;% ggplot(aes(x = actor_5)) + geom_density(size = 0, fill = &quot;blue&quot;) + scale_y_continuous(breaks = NULL) + ggtitle(&quot;Chimp #5&#39;s density&quot;) + theme_fivethirtyeight() And because we made the density only using the r_actor[5,Intercept] values (i.e., we didn’t add b_Intercept to them), the density is in a deviance-score metric. McElreath built his own link() function. Here we’ll build an alternative to fitted(). # our hand-made `brms::fitted()` alternative my_fitted &lt;- function(prosoc_left, condition){ post %&gt;% transmute(fitted = (b_Intercept + `r_actor[5,Intercept]` + b_prosoc_left * prosoc_left + `b_prosoc_left:condition` * prosoc_left * condition) %&gt;% inv_logit_scaled()) } # the posterior summaries ( chimp_5_my_fitted &lt;- tibble(prosoc_left = c(0, 1, 0, 1), condition = c(0, 0, 1, 1)) %&gt;% mutate(post = map2(prosoc_left, condition, my_fitted)) %&gt;% unnest() %&gt;% mutate(condition = str_c(prosoc_left, &quot;/&quot;, condition)) %&gt;% mutate(condition = factor(condition, levels = c(&quot;0/0&quot;, &quot;1/0&quot;, &quot;0/1&quot;, &quot;1/1&quot;))) %&gt;% group_by(condition) %&gt;% tidybayes::mean_qi(fitted) ) ## # A tibble: 4 x 7 ## condition fitted .lower .upper .width .point .interval ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 0/0 0.331 0.226 0.448 0.95 mean qi ## 2 1/0 0.527 0.384 0.667 0.95 mean qi ## 3 0/1 0.331 0.226 0.448 0.95 mean qi ## 4 1/1 0.495 0.354 0.637 0.95 mean qi # the empirical summaries chimp &lt;- 5 ( chimp_5_d &lt;- d %&gt;% filter(actor == chimp) %&gt;% group_by(prosoc_left, condition) %&gt;% summarise(prob = mean(pulled_left)) %&gt;% ungroup() %&gt;% mutate(condition = str_c(prosoc_left, &quot;/&quot;, condition)) %&gt;% mutate(condition = factor(condition, levels = c(&quot;0/0&quot;, &quot;1/0&quot;, &quot;0/1&quot;, &quot;1/1&quot;))) ) ## # A tibble: 4 x 3 ## prosoc_left condition prob ## &lt;int&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 0 0/0 0.333 ## 2 0 0/1 0.278 ## 3 1 1/0 0.556 ## 4 1 1/1 0.5 Okay, let’s see how good we are at retrodicting the pulled_left probabilities for actor == 5. chimp_5_my_fitted %&gt;% ggplot(aes(x = condition, y = fitted, group = 1)) + geom_ribbon(aes(ymin = .lower, ymax = .upper), fill = &quot;orange1&quot;) + geom_line(color = &quot;blue&quot;) + geom_point(data = chimp_5_d, aes(y = prob), color = &quot;grey25&quot;) + ggtitle(&quot;Chimp #5&quot;, subtitle = &quot;This plot is like the last except\\nwe did more by hand.&quot;) + coord_cartesian(ylim = 0:1) + theme_fivethirtyeight() + theme(plot.subtitle = element_text(size = 10)) Not bad. 12.4.2 Posterior prediction for new clusters. By average actor, McElreath referred to a chimp with an intercept exactly at the population mean \\(\\alpha\\). So this time we’ll only be working with the population parameters, or what are also sometimes called the fixed effects. When using brms::posterior_samples() output, this would mean working with columns beginning with the b_ prefix (i.e., b_Intercept, b_prosoc_left, and b_prosoc_left:condition). post_average_actor &lt;- post %&gt;% # here we use the linear regression formula to get the log_odds for the 4 conditions transmute(`0/0` = b_Intercept, `1/0` = b_Intercept + b_prosoc_left, `0/1` = b_Intercept, `1/1` = b_Intercept + b_prosoc_left + `b_prosoc_left:condition`) %&gt;% # with `mutate_all()` we can convert the estimates to probabilities in one fell swoop mutate_all(inv_logit_scaled) %&gt;% # putting the data in the long format and grouping by condition (i.e., `key`) gather() %&gt;% mutate(key = factor(key, level = c(&quot;0/0&quot;, &quot;1/0&quot;, &quot;0/1&quot;, &quot;1/1&quot;))) %&gt;% group_by(key) %&gt;% # here we get the summary values for the plot summarise(m = mean(value), # note we&#39;re using 80% intervals ll = quantile(value, probs = .1), ul = quantile(value, probs = .9)) post_average_actor ## # A tibble: 4 x 4 ## key m ll ul ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0/0 0.586 0.335 0.827 ## 2 1/0 0.741 0.528 0.917 ## 3 0/1 0.586 0.335 0.827 ## 4 1/1 0.719 0.493 0.906 Figure 12.5.a. p1 &lt;- post_average_actor %&gt;% ggplot(aes(x = key, y = m, group = 1)) + geom_ribbon(aes(ymin = ll, ymax = ul), fill = &quot;orange1&quot;) + geom_line(color = &quot;blue&quot;) + ggtitle(&quot;Average actor&quot;) + coord_cartesian(ylim = 0:1) + theme_fivethirtyeight() + theme(plot.title = element_text(size = 14, hjust = .5)) p1 If we want to depict the variability across the chimps, we need to include sd_actor__Intercept into the calculations. In the first block of code, below, we simulate a bundle of new intercepts defined by \\[\\alpha_\\text{actor} \\sim \\text{Normal} (0, \\sigma_\\text{actor})\\] # the random effects set.seed(12.42) ran_ef &lt;- tibble(random_effect = rnorm(n = 1000, mean = 0, sd = post$sd_actor__Intercept)) %&gt;% # with the `., ., ., .` syntax, we quadruple the previous line bind_rows(., ., ., .) # the fixed effects (i.e., the population parameters) fix_ef &lt;- post %&gt;% slice(1:1000) %&gt;% transmute(`0/0` = b_Intercept, `1/0` = b_Intercept + b_prosoc_left, `0/1` = b_Intercept, `1/1` = b_Intercept + b_prosoc_left + `b_prosoc_left:condition`) %&gt;% gather() %&gt;% rename(condition = key, fixed_effect = value) %&gt;% mutate(condition = factor(condition, level = c(&quot;0/0&quot;, &quot;1/0&quot;, &quot;0/1&quot;, &quot;1/1&quot;))) # combine them ran_and_fix_ef &lt;- bind_cols(ran_ef, fix_ef) %&gt;% mutate(intercept = fixed_effect + random_effect) %&gt;% mutate(prob = inv_logit_scaled(intercept)) # to simplify things, we&#39;ll reduce them to summaries ( marginal_effects &lt;- ran_and_fix_ef %&gt;% group_by(condition) %&gt;% summarise(m = mean(prob), ll = quantile(prob, probs = .1), ul = quantile(prob, probs = .9)) ) ## # A tibble: 4 x 4 ## condition m ll ul ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0/0 0.559 0.0860 0.970 ## 2 1/0 0.673 0.177 0.986 ## 3 0/1 0.559 0.0860 0.970 ## 4 1/1 0.657 0.163 0.984 Behold Figure 12.5.b. p2 &lt;- marginal_effects %&gt;% ggplot(aes(x = condition, y = m, group = 1)) + geom_ribbon(aes(ymin = ll, ymax = ul), fill = &quot;orange1&quot;) + geom_line(color = &quot;blue&quot;) + ggtitle(&quot;Marginal of actor&quot;) + coord_cartesian(ylim = 0:1) + theme_fivethirtyeight() + theme(plot.title = element_text(size = 14, hjust = .5)) p2 Figure 12.5.c just takes a tiny bit more wrangling. p3 &lt;- ran_and_fix_ef %&gt;% mutate(iter = rep(1:1000, times = 4)) %&gt;% filter(iter %in% c(1:50)) %&gt;% ggplot(aes(x = condition, y = prob, group = iter)) + theme_fivethirtyeight() + ggtitle(&quot;50 simulated actors&quot;) + coord_cartesian(ylim = 0:1) + geom_line(alpha = 1/2, color = &quot;orange3&quot;) + theme(plot.title = element_text(size = 14, hjust = .5)) p3 For the finale, we’ll stitch the three plots together. library(gridExtra) grid.arrange(p1, p2, p3, ncol = 3) 12.4.2.1 Bonus: Let’s use fitted() this time. We just made those plots using various wrangled versions of post, the data frame returned by posterior_samples(b.12.4). If you followed along closely, part of what made that a great exercise is that it forced you to consider what the various vectors in post meant with respect to the model formula. But it’s also handy to see how to do that from a different perspective. So in this section, we’ll repeat that process by relying on the fitted() function, instead. We’ll go in the same order, starting with the average actor. nd &lt;- tibble(prosoc_left = c(0, 1, 0, 1), condition = c(0, 0, 1, 1)) ( f &lt;- fitted(b12.4, newdata = nd, re_formula = NA, probs = c(.1, .9)) %&gt;% as_tibble() %&gt;% bind_cols(nd) %&gt;% mutate(condition = str_c(prosoc_left, &quot;/&quot;, condition) %&gt;% factor(., levels = c(&quot;0/0&quot;, &quot;1/0&quot;, &quot;0/1&quot;, &quot;1/1&quot;))) ) ## # A tibble: 4 x 6 ## Estimate Est.Error Q10 Q90 prosoc_left condition ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 0.586 0.187 0.335 0.827 0 0/0 ## 2 0.741 0.159 0.528 0.917 1 1/0 ## 3 0.586 0.187 0.335 0.827 0 0/1 ## 4 0.719 0.165 0.493 0.906 1 1/1 You should notice a few things. Since b12.4 is a multilevel model, it had three predictors: prosoc_left, condition, and actor. However, our nd data only included the first two of those predictors. The reason fitted() permitted that was because we set re_formula = NA. When you do that, you tell fitted() to ignore group-level effects (i.e., focus only on the fixed effects). This was our fitted() version of ignoring the r_ vectors returned by posterior_samples(). Here’s the plot. p4 &lt;- f %&gt;% ggplot(aes(x = condition, y = Estimate, group = 1)) + geom_ribbon(aes(ymin = Q10, ymax = Q90), fill = &quot;blue&quot;) + geom_line(color = &quot;orange1&quot;) + ggtitle(&quot;Average actor&quot;) + coord_cartesian(ylim = 0:1) + theme_fivethirtyeight() + theme(plot.title = element_text(size = 14, hjust = .5)) p4 For marginal of actor, we can continue using the same nd data. This time we’ll be sticking with the default re_formula setting, which will accommodate the multilevel nature of the model. However, we’ll also be adding allow_new_levels = T and sample_new_levels = &quot;gaussian&quot;. The former will allow us to marginalize across the specific actors in our data and the latter will instruct fitted() to use the multivariate normal distribution implied by the random effects. It’ll make more sense why I say multivariate normal by the end of the next chapter. For now, just go with it. ( f &lt;- fitted(b12.4, newdata = nd, probs = c(.1, .9), allow_new_levels = T, sample_new_levels = &quot;gaussian&quot;) %&gt;% as_tibble() %&gt;% bind_cols(nd) %&gt;% mutate(condition = str_c(prosoc_left, &quot;/&quot;, condition) %&gt;% factor(., levels = c(&quot;0/0&quot;, &quot;1/0&quot;, &quot;0/1&quot;, &quot;1/1&quot;))) ) ## # A tibble: 4 x 6 ## Estimate Est.Error Q10 Q90 prosoc_left condition ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 0.556 0.330 0.0669 0.969 0 0/0 ## 2 0.665 0.312 0.139 0.986 1 1/0 ## 3 0.556 0.330 0.0669 0.969 0 0/1 ## 4 0.648 0.316 0.129 0.984 1 1/1 Here’s our fitted()-based marginal of actor plot. p5 &lt;- f %&gt;% ggplot(aes(x = condition, y = Estimate, group = 1)) + geom_ribbon(aes(ymin = Q10, ymax = Q90), fill = &quot;blue&quot;) + geom_line(color = &quot;orange1&quot;) + ggtitle(&quot;Marginal of actor&quot;) + coord_cartesian(ylim = 0:1) + theme_fivethirtyeight() + theme(plot.title = element_text(size = 14, hjust = .5)) p5 For the simulated actors plot, we’ll just amend our process from the last one. This time we’re setting summary = F, in order to keep the iteration-specific results, and setting nsamples = n_sim. n_sim is just a name for the number of actors we’d like to simulate (i.e., 50, as in the text). # how many simulated actors would you like? n_sim &lt;- 50 ( f &lt;- fitted(b12.4, newdata = nd, probs = c(.1, .9), allow_new_levels = T, sample_new_levels = &quot;gaussian&quot;, summary = F, nsamples = n_sim) %&gt;% as_tibble() %&gt;% mutate(iter = 1:n_sim) %&gt;% gather(key, value, -iter) %&gt;% bind_cols(nd %&gt;% transmute(condition = str_c(prosoc_left, &quot;/&quot;, condition) %&gt;% factor(., levels = c(&quot;0/0&quot;, &quot;1/0&quot;, &quot;0/1&quot;, &quot;1/1&quot;))) %&gt;% expand(condition, iter = 1:n_sim)) ) ## # A tibble: 200 x 5 ## iter key value condition iter1 ## &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;fct&gt; &lt;int&gt; ## 1 1 V1 0.330 0/0 1 ## 2 2 V1 0.299 0/0 2 ## 3 3 V1 0.841 0/0 3 ## 4 4 V1 0.735 0/0 4 ## 5 5 V1 0.858 0/0 5 ## 6 6 V1 0.382 0/0 6 ## 7 7 V1 0.690 0/0 7 ## 8 8 V1 0.512 0/0 8 ## 9 9 V1 0.912 0/0 9 ## 10 10 V1 0.394 0/0 10 ## # … with 190 more rows p6 &lt;- f %&gt;% ggplot(aes(x = condition, y = value, group = iter)) + geom_line(alpha = 1/2, color = &quot;blue&quot;) + ggtitle(&quot;50 simulated actors&quot;) + coord_cartesian(ylim = 0:1) + theme_fivethirtyeight() + theme(plot.title = element_text(size = 14, hjust = .5)) p6 Here they are altogether. grid.arrange(p4, p5, p6, ncol = 3) 12.4.3 Focus and multilevel prediction. First, let’s load the Kline data. # prep data library(rethinking) data(Kline) d &lt;- Kline Switch out the packages, once again. detach(package:rethinking, unload = T) library(brms) rm(Kline) The statistical formula for our multilevel count model is \\[ \\begin{eqnarray} \\text{total_tools}_i &amp; \\sim &amp; \\text{Poisson} (\\mu_i) \\\\ \\text{log} (\\mu_i) &amp; = &amp; \\alpha + \\alpha_{\\text{culture}_i} + \\beta \\text{log} (\\text{population}_i) \\\\ \\alpha &amp; \\sim &amp; \\text{Normal} (0, 10) \\\\ \\beta &amp; \\sim &amp; \\text{Normal} (0, 1) \\\\ \\alpha_{\\text{culture}} &amp; \\sim &amp; \\text{Normal} (0, \\sigma_{\\text{culture}}) \\\\ \\sigma_{\\text{culture}} &amp; \\sim &amp; \\text{HalfCauchy} (0, 1) \\\\ \\end{eqnarray} \\] With brms, we don’t actually need to make the logpop or society variables. We’re ready to fit the multilevel Kline model with the data in hand. b12.6 &lt;- brm(data = d, family = poisson, total_tools ~ 0 + intercept + log(population) + (1 | culture), prior = c(prior(normal(0, 10), class = b, coef = intercept), prior(normal(0, 1), class = b), prior(cauchy(0, 1), class = sd)), iter = 4000, warmup = 1000, cores = 3, chains = 3, seed = 12) Note how we used the special 0 + intercept syntax rather than using the default Intercept. This is because our predictor variable was not mean centered. For more info, see here. Though we used the 0 + intercept syntax for the fixed effect, it was not necessary for the random effect. Both ways work. Here is the data-processing work for our variant of Figure 12.6. nd &lt;- tibble(population = seq(from = 1000, to = 400000, by = 5000), # to &quot;simulate counterfactual societies, using the hyper-parameters&quot; (p. 383), # we&#39;ll plug a new island into the `culture` variable culture = &quot;my_island&quot;) p &lt;- predict(b12.6, # this allows us to simulate values for our counterfactual island, &quot;my_island&quot; allow_new_levels = T, # here we explicitly tell brms we want to include the group-level effects re_formula = ~ (1 | culture), # from the brms manual, this uses the &quot;(multivariate) normal distribution implied by # the group-level standard deviations and correlations&quot;, which appears to be # what McElreath did in the text. sample_new_levels = &quot;gaussian&quot;, newdata = nd, probs = c(.015, .055, .165, .835, .945, .985)) %&gt;% as_tibble() %&gt;% bind_cols(nd) p %&gt;% glimpse() ## Observations: 80 ## Variables: 10 ## $ Estimate &lt;dbl&gt; 19.78322, 31.16189, 36.55989, 40.31711, 43.44322, 45.… ## $ Est.Error &lt;dbl&gt; 9.864749, 14.103522, 16.554112, 18.521093, 20.545470,… ## $ Q1.5 &lt;dbl&gt; 5.000, 10.000, 13.000, 14.000, 15.000, 16.000, 17.000… ## $ Q5.5 &lt;dbl&gt; 8, 15, 17, 20, 21, 22, 23, 25, 25, 26, 27, 27, 27, 28… ## $ Q16.5 &lt;dbl&gt; 12, 20, 24, 26, 28, 30, 31, 33, 34, 34, 35, 36, 37, 3… ## $ Q83.5 &lt;dbl&gt; 27, 41, 48, 53, 57, 60, 63, 66, 68, 70, 72, 74, 76, 7… ## $ Q94.5 &lt;dbl&gt; 35.000, 53.000, 62.000, 68.000, 74.000, 78.000, 81.00… ## $ Q98.5 &lt;dbl&gt; 47.000, 69.000, 82.000, 91.000, 98.015, 106.000, 109.… ## $ population &lt;dbl&gt; 1000, 6000, 11000, 16000, 21000, 26000, 31000, 36000,… ## $ culture &lt;chr&gt; &quot;my_island&quot;, &quot;my_island&quot;, &quot;my_island&quot;, &quot;my_island&quot;, &quot;… For a detailed discussion on this way of using brms::predict(), see Andrew MacDonald’s great blogpost on this very figure. Here’s what we’ve been working for: p %&gt;% ggplot(aes(x = log(population), y = Estimate)) + geom_ribbon(aes(ymin = Q1.5, ymax = Q98.5), fill = &quot;orange2&quot;, alpha = 1/3) + geom_ribbon(aes(ymin = Q5.5, ymax = Q94.5), fill = &quot;orange2&quot;, alpha = 1/3) + geom_ribbon(aes(ymin = Q16.5, ymax = Q83.5), fill = &quot;orange2&quot;, alpha = 1/3) + geom_line(color = &quot;orange4&quot;) + geom_text(data = d, aes(y = total_tools, label = culture), size = 2.33, color = &quot;blue&quot;) + ggtitle(&quot;Total tools as a function of log(population)&quot;) + coord_cartesian(ylim = range(d$total_tools)) + theme_fivethirtyeight() + theme(plot.title = element_text(size = 12, hjust = .5)) Glorious. The envelope of predictions is a lot wider here than it was back in Chapter 10. This is a consequene of the varying intercepts, combined with the fact that there is much more variation in the data than a pure-Poisson model anticipates. (p. 384) 12.5 Summary Bonus: tidybayes::spread_draws() A big part of this chapter, both what McElreath focused on in the text and even our plotting digression a bit above, focused on how to combine the fixed effects of a multilevel with the group-level. Given some binomial variable, \\(\\text{criterion}\\), and some group term, \\(\\text{grouping variable}\\), we’ve learned the simple multilevel model follows a form like \\[ \\begin{eqnarray} \\text{criterion}_i &amp; \\sim &amp; \\text{Binomial} (n_i \\geq 1, p_i) \\\\ \\text{logit} (p_i) &amp; = &amp; \\alpha + \\alpha_{\\text{grouping variable}_i}\\\\ \\alpha &amp; \\sim &amp; \\text{Normal} (0, 1) \\\\ \\alpha_{\\text{grouping variable}} &amp; \\sim &amp; \\text{Normal} (0, \\sigma_{\\text{grouping variable}}) \\\\ \\sigma_{\\text{grouping variable}} &amp; \\sim &amp; \\text{HalfCauchy} (0, 1) \\end{eqnarray} \\] and we’ve been grappling with the relation between the grand mean \\(\\alpha\\) and the group-level deviations \\(\\alpha_{\\text{grouping variable}}\\). For situations where we have the brms::brm() model fit in hand, we’ve been playing with various ways to use the iterations, particularly with either the posterior_samples() method and the fitted()/predict() method. Both are great. But (a) we have other options, which I’d like to share, and (b) if you’re like me, you probably need more practice than following along with the examples in the text. In this bonus section, we are going to introduce two simplified models and then practice working with combining the grand mean various combinations of the random effects. For our first step, we’ll introduce the models. 12.5.1 Intercepts-only models with one or two grouping variables If you recall, b12.4 was our first multilevel model with the chimps data. We can retrieve the model formula like so. b12.4$formula ## pulled_left | trials(1) ~ 1 + prosoc_left + prosoc_left:condition + (1 | actor) In addition to the model intercept and random effects for the individual chimps (i.e., actor), we also included fixed effects for the study conditions. For our bonus section, it’ll be easier if we reduce this to a simple intercepts-only model with the sole actor grouping factor. That model will follow the form \\[ \\begin{eqnarray} \\text{pulled_left}_i &amp; \\sim &amp; \\text{Binomial} (n_i = 1, p_i) \\\\ \\text{logit} (p_i) &amp; = &amp; \\alpha + \\alpha_{\\text{actor}_i}\\\\ \\alpha &amp; \\sim &amp; \\text{Normal} (0, 10) \\\\ \\alpha_{\\text{actor}} &amp; \\sim &amp; \\text{Normal} (0, \\sigma_{\\text{actor}}) \\\\ \\sigma_{\\text{actor}} &amp; \\sim &amp; \\text{HalfCauchy} (0, 1) \\end{eqnarray} \\] Before we fit the model, you might recall that (a) we’ve already removed the chimpanzees data after saving the data as d and (b) we subsequently reassigned the Kline data to d. Instead of reloading the rethinking package to retrieve the chimpanzees data, we might also acknowledge that the data has also been saved within our b12.4 fit object. [It’s easy to forget such things.] b12.4$data %&gt;% glimpse() ## Observations: 504 ## Variables: 4 ## $ pulled_left &lt;int&gt; 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0… ## $ prosoc_left &lt;int&gt; 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0… ## $ actor &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ condition &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… So there’s no need to reload anything. Everything we need is already at hand. Let’s fit the intercepts-only model. b12.7 &lt;- brm(data = b12.4$data, family = binomial, pulled_left | trials(1) ~ 1 + (1 | actor), prior = c(prior(normal(0, 10), class = Intercept), prior(cauchy(0, 1), class = sd)), iter = 5000, warmup = 1000, chains = 4, cores = 4, control = list(adapt_delta = 0.95), seed = 12) Here’s the model summary: print(b12.7) ## Family: binomial ## Links: mu = logit ## Formula: pulled_left | trials(1) ~ 1 + (1 | actor) ## Data: b12.4$data (Number of observations: 504) ## Samples: 4 chains, each with iter = 5000; warmup = 1000; thin = 1; ## total post-warmup samples = 16000 ## ## Group-Level Effects: ## ~actor (Number of levels: 7) ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## sd(Intercept) 2.20 0.89 1.10 4.55 2859 1.00 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## Intercept 0.76 0.92 -0.93 2.70 2370 1.00 ## ## Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample ## is a crude measure of effective sample size, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). Now recall that our competing cross-classified model, b12.5 added random effects for the trial blocks. Here was that formula. b12.5$formula ## pulled_left | trials(1) ~ prosoc_left + (1 | actor) + (1 | block) + prosoc_left:condition And, of course, we can retrieve the data from that model, too. b12.5$data %&gt;% glimpse() ## Observations: 504 ## Variables: 5 ## $ pulled_left &lt;int&gt; 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0… ## $ prosoc_left &lt;int&gt; 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0… ## $ actor &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ block &lt;int&gt; 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3… ## $ condition &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… It’s the same data we used from the b12.4 model, but with the addition of the block index. With those data in hand, we can fit the intercepts-only version of our cross-classified model. This model formula follows the form \\[ \\begin{eqnarray} \\text{pulled_left}_i &amp; \\sim &amp; \\text{Binomial} (n_i = 1, p_i) \\\\ \\text{logit} (p_i) &amp; = &amp; \\alpha + \\alpha_{\\text{actor}_i} + \\alpha_{\\text{block}_i}\\\\ \\alpha &amp; \\sim &amp; \\text{Normal} (0, 10) \\\\ \\alpha_{\\text{actor}} &amp; \\sim &amp; \\text{Normal} (0, \\sigma_{\\text{actor}}) \\\\ \\alpha_{\\text{block}} &amp; \\sim &amp; \\text{Normal} (0, \\sigma_{\\text{block}}) \\\\ \\sigma_{\\text{actor}} &amp; \\sim &amp; \\text{HalfCauchy} (0, 1) \\\\ \\sigma_{\\text{block}} &amp; \\sim &amp; \\text{HalfCauchy} (0, 1) \\end{eqnarray} \\] Fit the model. b12.8 &lt;- brm(data = b12.5$data, family = binomial, pulled_left | trials(1) ~ 1 + (1 | actor) + (1 | block), prior = c(prior(normal(0, 10), class = Intercept), prior(cauchy(0, 1), class = sd)), iter = 5000, warmup = 1000, chains = 4, cores = 4, control = list(adapt_delta = 0.95), seed = 12) Here’s the summary. print(b12.8) ## Family: binomial ## Links: mu = logit ## Formula: pulled_left | trials(1) ~ 1 + (1 | actor) + (1 | block) ## Data: b12.5$data (Number of observations: 504) ## Samples: 4 chains, each with iter = 5000; warmup = 1000; thin = 1; ## total post-warmup samples = 16000 ## ## Group-Level Effects: ## ~actor (Number of levels: 7) ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## sd(Intercept) 2.24 0.94 1.09 4.53 4049 1.00 ## ## ~block (Number of levels: 6) ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## sd(Intercept) 0.22 0.18 0.01 0.67 6647 1.00 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## Intercept 0.82 0.94 -0.92 2.79 3460 1.00 ## ## Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample ## is a crude measure of effective sample size, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). Now we’ve fit our two intercepts-only models, let’s get to the heart of this section. We are going to practice four methods for working with the posterior samples. Each method will revolve around a different primary function. In order, they are brms::posterior_samples() brms::coef() brms::fitted() tidybayes::spread_draws() We’ve already had some practice with the first three, but I hope this section will make them even more clear. The tidybayes::spread_draws() method will be new, to us. I think you’ll find it’s a handy alternative. With each of the four methods, we’ll practice three different model summaries. Getting the posterior draws for the actor-level estimates from the b12.7 model Getting the posterior draws for the actor-level estimates from the cross-classified b12.8 model, averaging over the levels of block Getting the posterior draws for the actor-level estimates from the cross-classified b12.8 model, based on block == 1 So to be clear, our goal is to accomplish those three tasks with four methods, each of which should yield equivalent results. 12.5.2 brms::posterior_samples() To warm up, let’s take a look at the structure of the posterior_samples() output for the simple b12.7 model. posterior_samples(b12.7) %&gt;% str() ## &#39;data.frame&#39;: 16000 obs. of 10 variables: ## $ b_Intercept : num 1.53 1.3 1.85 1.97 1.85 ... ## $ sd_actor__Intercept : num 1.76 1.34 1.8 1.6 1.98 ... ## $ r_actor[1,Intercept]: num -2.08 -1.35 -2.27 -2.24 -2.22 ... ## $ r_actor[2,Intercept]: num 2.44 2.19 3.17 1.61 2.24 ... ## $ r_actor[3,Intercept]: num -2.04 -1.85 -2.38 -2.08 -3.03 ... ## $ r_actor[4,Intercept]: num -2.62 -1.53 -2.16 -2.72 -2.26 ... ## $ r_actor[5,Intercept]: num -1.56 -2.09 -2.32 -2.22 -2.33 ... ## $ r_actor[6,Intercept]: num -1.046 -0.873 -0.829 -1.539 -1.272 ... ## $ r_actor[7,Intercept]: num 0.947 0.273 -0.241 0.574 0.785 ... ## $ lp__ : num -283 -286 -283 -285 -283 ... The b_Intercept vector corresponds to the \\(\\alpha\\) term in the statistical model. The second vector, sd_actor__Intercept, corresponds to the \\(\\sigma_{\\text{actor}}\\) term. And the next 7 vectors beginning with the r_actor suffix are the \\(\\alpha_{\\text{actor}}\\) deviations from the grand mean, \\(\\alpha\\). Thus if we wanted to get the model-implied probability for our first chimp, we’d add b_Intercept to r_actor[1,Intercept] and then take the inverse logit. posterior_samples(b12.7) %&gt;% transmute(`chimp 1&#39;s average probability of pulling left` = (b_Intercept + `r_actor[1,Intercept]`) %&gt;% inv_logit_scaled()) %&gt;% head() ## chimp 1&#39;s average probability of pulling left ## 1 0.3666511 ## 2 0.4891179 ## 3 0.3965780 ## 4 0.4309511 ## 5 0.4097169 ## 6 0.4485629 To complete our first task, then, of getting the posterior draws for the actor-level estimates from the b12.7 model, we can do that in bulk. p1 &lt;- posterior_samples(b12.7) %&gt;% transmute(`chimp 1&#39;s average probability of pulling left` = b_Intercept + `r_actor[1,Intercept]`, `chimp 2&#39;s average probability of pulling left` = b_Intercept + `r_actor[2,Intercept]`, `chimp 3&#39;s average probability of pulling left` = b_Intercept + `r_actor[3,Intercept]`, `chimp 4&#39;s average probability of pulling left` = b_Intercept + `r_actor[4,Intercept]`, `chimp 5&#39;s average probability of pulling left` = b_Intercept + `r_actor[5,Intercept]`, `chimp 6&#39;s average probability of pulling left` = b_Intercept + `r_actor[6,Intercept]`, `chimp 7&#39;s average probability of pulling left` = b_Intercept + `r_actor[7,Intercept]`) %&gt;% mutate_all(inv_logit_scaled) str(p1) ## &#39;data.frame&#39;: 16000 obs. of 7 variables: ## $ chimp 1&#39;s average probability of pulling left: num 0.367 0.489 0.397 0.431 0.41 ... ## $ chimp 2&#39;s average probability of pulling left: num 0.982 0.971 0.993 0.973 0.984 ... ## $ chimp 3&#39;s average probability of pulling left: num 0.375 0.367 0.37 0.472 0.236 ... ## $ chimp 4&#39;s average probability of pulling left: num 0.252 0.443 0.424 0.319 0.399 ... ## $ chimp 5&#39;s average probability of pulling left: num 0.493 0.313 0.386 0.436 0.383 ... ## $ chimp 6&#39;s average probability of pulling left: num 0.619 0.606 0.735 0.605 0.642 ... ## $ chimp 7&#39;s average probability of pulling left: num 0.922 0.829 0.833 0.927 0.933 ... One of the things I really like about this method is the b_Intercept + r_actor[i,Intercept] part of the code makes it very clear, to me, how the porterior_samples() columns correspond to the statistical model, \\(\\text{logit} (p_i) &amp; = &amp; \\alpha + \\alpha_{\\text{actor}_i}\\). This method easily extends to our next task, getting the posterior draws for the actor-level estimates from the cross-classified b12.8 model, averaging over the levels of block. In fact, other than switching out b12.7 for b12.8, the method is identical. p2 &lt;- posterior_samples(b12.8) %&gt;% transmute(`chimp 1&#39;s average probability of pulling left` = b_Intercept + `r_actor[1,Intercept]`, `chimp 2&#39;s average probability of pulling left` = b_Intercept + `r_actor[2,Intercept]`, `chimp 3&#39;s average probability of pulling left` = b_Intercept + `r_actor[3,Intercept]`, `chimp 4&#39;s average probability of pulling left` = b_Intercept + `r_actor[4,Intercept]`, `chimp 5&#39;s average probability of pulling left` = b_Intercept + `r_actor[5,Intercept]`, `chimp 6&#39;s average probability of pulling left` = b_Intercept + `r_actor[6,Intercept]`, `chimp 7&#39;s average probability of pulling left` = b_Intercept + `r_actor[7,Intercept]`) %&gt;% mutate_all(inv_logit_scaled) str(p2) ## &#39;data.frame&#39;: 16000 obs. of 7 variables: ## $ chimp 1&#39;s average probability of pulling left: num 0.403 0.437 0.458 0.421 0.416 ... ## $ chimp 2&#39;s average probability of pulling left: num 0.993 0.99 0.991 1 0.999 ... ## $ chimp 3&#39;s average probability of pulling left: num 0.406 0.419 0.385 0.343 0.384 ... ## $ chimp 4&#39;s average probability of pulling left: num 0.353 0.347 0.31 0.286 0.429 ... ## $ chimp 5&#39;s average probability of pulling left: num 0.391 0.388 0.352 0.478 0.36 ... ## $ chimp 6&#39;s average probability of pulling left: num 0.672 0.683 0.646 0.634 0.633 ... ## $ chimp 7&#39;s average probability of pulling left: num 0.904 0.896 0.889 0.927 0.897 ... The reason we can still get away with this is because the grand mean in the b12.8 model is the grand mean across all levels of actor and block. AND it’s the case that the r_actor and r_block vectors returned by posterior_samples(b12.8) are all in deviation metrics–execute posterior_samples(b12.8) %&gt;% glimpse() if it will help you follow along. So if we simply leave out the r_block vectors, we are ignoring the specific block-level deviations, effectively averaging over them. Now for our third task, we’ve decided we wanted to retrieve the posterior draws for the actor-level estimates from the cross-classified b12.8 model, based on block == 1. To get the chimp-specific estimates for the first block, we simply add + r_block[1,Intercept] to the end of each formula. p3 &lt;- posterior_samples(b12.8) %&gt;% transmute(`chimp 1&#39;s average probability of pulling left` = b_Intercept + `r_actor[1,Intercept]` + `r_block[1,Intercept]`, `chimp 2&#39;s average probability of pulling left` = b_Intercept + `r_actor[2,Intercept]` + `r_block[1,Intercept]`, `chimp 3&#39;s average probability of pulling left` = b_Intercept + `r_actor[3,Intercept]` + `r_block[1,Intercept]`, `chimp 4&#39;s average probability of pulling left` = b_Intercept + `r_actor[4,Intercept]` + `r_block[1,Intercept]`, `chimp 5&#39;s average probability of pulling left` = b_Intercept + `r_actor[5,Intercept]` + `r_block[1,Intercept]`, `chimp 6&#39;s average probability of pulling left` = b_Intercept + `r_actor[6,Intercept]` + `r_block[1,Intercept]`, `chimp 7&#39;s average probability of pulling left` = b_Intercept + `r_actor[7,Intercept]` + `r_block[1,Intercept]`) %&gt;% mutate_all(inv_logit_scaled) str(p3) ## &#39;data.frame&#39;: 16000 obs. of 7 variables: ## $ chimp 1&#39;s average probability of pulling left: num 0.278 0.468 0.457 0.422 0.408 ... ## $ chimp 2&#39;s average probability of pulling left: num 0.987 0.991 0.991 1 0.999 ... ## $ chimp 3&#39;s average probability of pulling left: num 0.28 0.45 0.384 0.343 0.376 ... ## $ chimp 4&#39;s average probability of pulling left: num 0.237 0.376 0.309 0.287 0.421 ... ## $ chimp 5&#39;s average probability of pulling left: num 0.268 0.417 0.351 0.479 0.353 ... ## $ chimp 6&#39;s average probability of pulling left: num 0.538 0.709 0.646 0.635 0.625 ... ## $ chimp 7&#39;s average probability of pulling left: num 0.843 0.907 0.889 0.927 0.894 ... Again, I like this method because of how close the wrangling code within transmute() is to the statistical model formula. I wrote a lot of code like this in my early days of working with these kinds of models, and I think the pedagogical insights were helpful. But this method has its limitations. It works fine if you’re working with some small number of groups. But that’s a lot of repetitious code and it would be utterly un-scalable to situations where you have 50 or 500 levels in your grouping variable. We need alternatives. 12.5.3 brms::coef() First, let’s review what the coef() function returns. coef(b12.7) ## $actor ## , , Intercept ## ## Estimate Est.Error Q2.5 Q97.5 ## 1 -0.3228553 0.2401400 -0.7960922 0.1402474 ## 2 4.8485079 1.5383234 2.8423349 8.6052735 ## 3 -0.6191537 0.2513396 -1.1214545 -0.1412591 ## 4 -0.6156347 0.2458075 -1.1090964 -0.1409848 ## 5 -0.3224140 0.2362941 -0.7925155 0.1336236 ## 6 0.5808851 0.2480937 0.1046163 1.0769954 ## 7 2.0847013 0.3749189 1.4048612 2.8775507 By default, we get the familiar summaries for mean performances for each of our seven chimps. These, of course, are in the log-odds metric and simply tacking on inv_logit_scaled() isn’t going to fully get the job done. So to get things in the probability metric, we’ll want to first set summary = F in order to work directly with un-summarized samples and then wrangle quite a bit. Part of the wrangling challenge is because coef() returns a list, rather than a data frame. With that in mind, the code for our first task of getting the posterior draws for the actor-level estimates from the b12.7 model looks like so. c1 &lt;- coef(b12.7, summary = F)$actor[, , ] %&gt;% as_tibble() %&gt;% gather() %&gt;% mutate(key = str_c(&quot;chimp &quot;, key, &quot;&#39;s average probability of pulling left&quot;), value = inv_logit_scaled(value), # we need an iteration index for `spread()` to work properly iter = rep(1:16000, times = 7)) %&gt;% spread(key = key, value = value) str(c1) ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 16000 obs. of 8 variables: ## $ iter : int 1 2 3 4 5 6 7 8 9 10 ... ## $ chimp 1&#39;s average probability of pulling left: num 0.367 0.489 0.397 0.431 0.41 ... ## $ chimp 2&#39;s average probability of pulling left: num 0.982 0.971 0.993 0.973 0.984 ... ## $ chimp 3&#39;s average probability of pulling left: num 0.375 0.367 0.37 0.472 0.236 ... ## $ chimp 4&#39;s average probability of pulling left: num 0.252 0.443 0.424 0.319 0.399 ... ## $ chimp 5&#39;s average probability of pulling left: num 0.493 0.313 0.386 0.436 0.383 ... ## $ chimp 6&#39;s average probability of pulling left: num 0.619 0.606 0.735 0.605 0.642 ... ## $ chimp 7&#39;s average probability of pulling left: num 0.922 0.829 0.833 0.927 0.933 ... So with this method, you get a little practice with three-dimensional indexing, which is a good skill to have. Now let’s extend it to our second task, getting the posterior draws for the actor-level estimates from the cross-classified b12.8 model, averaging over the levels of block. c2 &lt;- coef(b12.8, summary = F)$actor[, , ] %&gt;% as_tibble() %&gt;% gather() %&gt;% mutate(key = str_c(&quot;chimp &quot;, key, &quot;&#39;s average probability of pulling left&quot;), value = inv_logit_scaled(value), iter = rep(1:16000, times = 7)) %&gt;% spread(key = key, value = value) str(c2) ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 16000 obs. of 8 variables: ## $ iter : int 1 2 3 4 5 6 7 8 9 10 ... ## $ chimp 1&#39;s average probability of pulling left: num 0.403 0.437 0.458 0.421 0.416 ... ## $ chimp 2&#39;s average probability of pulling left: num 0.993 0.99 0.991 1 0.999 ... ## $ chimp 3&#39;s average probability of pulling left: num 0.406 0.419 0.385 0.343 0.384 ... ## $ chimp 4&#39;s average probability of pulling left: num 0.353 0.347 0.31 0.286 0.429 ... ## $ chimp 5&#39;s average probability of pulling left: num 0.391 0.388 0.352 0.478 0.36 ... ## $ chimp 6&#39;s average probability of pulling left: num 0.672 0.683 0.646 0.634 0.633 ... ## $ chimp 7&#39;s average probability of pulling left: num 0.904 0.896 0.889 0.927 0.897 ... As with our posterior_samples() method, this code was near identical to the block, above. All we did was switch out b12.7 for b12.8. [Okay, we removed a line of annotations. But that doesn’t really count.] We should point something out, though. Consider what coef() yields when working with a cross-classified model. coef(b12.8) ## $actor ## , , Intercept ## ## Estimate Est.Error Q2.5 Q97.5 ## 1 -0.3309382 0.2637471 -0.85912023 0.1813434 ## 2 4.9125023 1.6005794 2.83104573 8.9988482 ## 3 -0.6190318 0.2758194 -1.16390465 -0.0835298 ## 4 -0.6236739 0.2698544 -1.15833584 -0.1057192 ## 5 -0.3275376 0.2679562 -0.86405363 0.1905555 ## 6 0.5847788 0.2735922 0.05012094 1.1297621 ## 7 2.0884696 0.3942676 1.35642012 2.9075374 ## ## ## $block ## , , Intercept ## ## Estimate Est.Error Q2.5 Q97.5 ## 1 0.6359211 0.9506609 -1.1469973 2.625571 ## 2 0.8724930 0.9394898 -0.9004279 2.823420 ## 3 0.8727196 0.9402097 -0.8879903 2.844786 ## 4 0.8000079 0.9398187 -0.9554111 2.784783 ## 5 0.8016466 0.9403898 -0.9509095 2.759832 ## 6 0.9214440 0.9414923 -0.8313673 2.896529 Now we have a list of two elements, one for actor and one for block. What might not be immediately obvious is that the summaries returned by one grouping level are based off of averaging over the other. Although this made our second task easy, it provides a challenge for our third task, getting the posterior draws for the actor-level estimates from the cross-classified b12.8 model, based on block == 1. To accomplish that, we’ll need to bring in ranef(). Let’s review what that returns. ranef(b12.8) ## $actor ## , , Intercept ## ## Estimate Est.Error Q2.5 Q97.5 ## 1 -1.1479441 0.9548717 -3.155849 0.6391628 ## 2 4.0954964 1.6607249 1.735123 8.1131626 ## 3 -1.4360377 0.9537786 -3.446306 0.3775506 ## 4 -1.4406798 0.9513512 -3.440700 0.3242996 ## 5 -1.1445435 0.9530794 -3.182475 0.6500693 ## 6 -0.2322271 0.9511768 -2.225866 1.5415640 ## 7 1.2714637 0.9818530 -0.719958 3.1740264 ## ## ## $block ## , , Intercept ## ## Estimate Est.Error Q2.5 Q97.5 ## 1 -0.18108484 0.2278906 -0.7372273 0.1270714 ## 2 0.05548710 0.1866952 -0.2827610 0.4917787 ## 3 0.05571371 0.1851168 -0.2820499 0.4892504 ## 4 -0.01699796 0.1824383 -0.4142501 0.3615457 ## 5 -0.01535930 0.1826817 -0.4145747 0.3584713 ## 6 0.10443814 0.2005518 -0.2168373 0.5870416 The format of the ranef() output is identical to that from coef(). However, the summaries are in the deviance metric. They’re all centered around zero, which corresponds to the part of the statistical model that specifies how \\(\\alpha_{\\text{block}} &amp; \\sim &amp; \\text{Normal} (0, \\sigma_{\\text{block}})\\). So then, if we want to continue using our coef() method, we’ll need to augment it with ranef() to accomplish our last task. c3 &lt;- coef(b12.8, summary = F)$actor[, , ] %&gt;% as_tibble() %&gt;% gather() %&gt;% # here we add in the `block == 1` deviations from the grand mean mutate(value = value + ranef(b12.8, summary = F)$block[, 1, ] %&gt;% rep(., times = 7)) %&gt;% mutate(key = str_c(&quot;chimp &quot;, key, &quot;&#39;s average probability of pulling left&quot;), value = inv_logit_scaled(value), iter = rep(1:16000, times = 7)) %&gt;% spread(key = key, value = value) str(c3) ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 16000 obs. of 8 variables: ## $ iter : int 1 2 3 4 5 6 7 8 9 10 ... ## $ chimp 1&#39;s average probability of pulling left: num 0.278 0.468 0.457 0.422 0.408 ... ## $ chimp 2&#39;s average probability of pulling left: num 0.987 0.991 0.991 1 0.999 ... ## $ chimp 3&#39;s average probability of pulling left: num 0.28 0.45 0.384 0.343 0.376 ... ## $ chimp 4&#39;s average probability of pulling left: num 0.237 0.376 0.309 0.287 0.421 ... ## $ chimp 5&#39;s average probability of pulling left: num 0.268 0.417 0.351 0.479 0.353 ... ## $ chimp 6&#39;s average probability of pulling left: num 0.538 0.709 0.646 0.635 0.625 ... ## $ chimp 7&#39;s average probability of pulling left: num 0.843 0.907 0.889 0.927 0.894 ... One of the nicest things about the coef() method is how is scales well. This code is no more burdensome for 5 group levels than it is for 5000. It’s also a post-processing version of the distinction McElreath made on page 372 between the two equivalent ways you might define a Gaussian: \\[\\text{Normal}(10, 1)\\] and \\[10 + \\text{Normal}(0, 1)\\] Conversely, it can be a little abstract. Let’s keep expanding our options. 12.5.4 brms::fitted() As is often the case, we’re going to want to define our predictor values for fitted(). (nd &lt;- b12.7$data %&gt;% distinct(actor)) ## actor ## 1 1 ## 2 2 ## 3 3 ## 4 4 ## 5 5 ## 6 6 ## 7 7 Now we have our new data, nd, here’s how we might use fitted() to accomplish our first task, getting the posterior draws for the actor-level estimates from the b12.7 model. f1 &lt;- fitted(b12.7, newdata = nd, summary = F, # within `fitted()`, this line does the same work that # `inv_logit_scaled()` did with the other two methods scale = &quot;response&quot;) %&gt;% as_tibble() %&gt;% set_names(str_c(&quot;chimp &quot;, 1:7, &quot;&#39;s average probability of pulling left&quot;)) str(f1) ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 16000 obs. of 7 variables: ## $ chimp 1&#39;s average probability of pulling left: num 0.367 0.489 0.397 0.431 0.41 ... ## $ chimp 2&#39;s average probability of pulling left: num 0.982 0.971 0.993 0.973 0.984 ... ## $ chimp 3&#39;s average probability of pulling left: num 0.375 0.367 0.37 0.472 0.236 ... ## $ chimp 4&#39;s average probability of pulling left: num 0.252 0.443 0.424 0.319 0.399 ... ## $ chimp 5&#39;s average probability of pulling left: num 0.493 0.313 0.386 0.436 0.383 ... ## $ chimp 6&#39;s average probability of pulling left: num 0.619 0.606 0.735 0.605 0.642 ... ## $ chimp 7&#39;s average probability of pulling left: num 0.922 0.829 0.833 0.927 0.933 ... This scales reasonably well. But might not work well if the vectors you wanted to rename didn’t follow a serial order, like ours. If you’re willing to pay with a few more lines of wrangling code, this method is more general, but still scalable. f1 &lt;- fitted(b12.7, newdata = nd, summary = F, scale = &quot;response&quot;) %&gt;% as_tibble() %&gt;% # you&#39;ll need this line to make the `spread()` line work properly mutate(iter = 1:n()) %&gt;% gather(key, value, -iter) %&gt;% mutate(key = str_replace(key, &quot;V&quot;, &quot;chimp &quot;)) %&gt;% mutate(key = str_c(key, &quot;&#39;s average probability of pulling left&quot;)) %&gt;% spread(key = key, value = value) str(f1) ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 16000 obs. of 8 variables: ## $ iter : int 1 2 3 4 5 6 7 8 9 10 ... ## $ chimp 1&#39;s average probability of pulling left: num 0.367 0.489 0.397 0.431 0.41 ... ## $ chimp 2&#39;s average probability of pulling left: num 0.982 0.971 0.993 0.973 0.984 ... ## $ chimp 3&#39;s average probability of pulling left: num 0.375 0.367 0.37 0.472 0.236 ... ## $ chimp 4&#39;s average probability of pulling left: num 0.252 0.443 0.424 0.319 0.399 ... ## $ chimp 5&#39;s average probability of pulling left: num 0.493 0.313 0.386 0.436 0.383 ... ## $ chimp 6&#39;s average probability of pulling left: num 0.619 0.606 0.735 0.605 0.642 ... ## $ chimp 7&#39;s average probability of pulling left: num 0.922 0.829 0.833 0.927 0.933 ... Now unlike with the previous two methods, our fitted() method will not allow us to simply switch out b12.7 for b12.8 to accomplish our second task of getting the posterior draws for the actor-level estimates from the cross-classified b12.8 model, averaging over the levels of block. This is because when we use fitted() in combination with its newdata argument, the function expects us to define values for all the predictor variables in the formula. Because the b12.8 model has both actor and block grouping variables as predictors, the default requires we include both in our new data. But if we were to specify a value for block in the nd data, we would no longer be averaging over the levels of block anymore; we’d be selecting one of the levels of block in particular, which we don’t yet want to do. Happily, brms::fitted() has a re_formula argument. If we would like to average out block, we simply drop it from the formula. Here’s how to do so. f2 &lt;- fitted(b12.8, newdata = nd, # this line allows us to average over the levels of block re_formula = pulled_left ~ 1 + (1 | actor), summary = F, scale = &quot;response&quot;) %&gt;% as_tibble() %&gt;% set_names(str_c(&quot;chimp &quot;, 1:7, &quot;&#39;s average probability of pulling left&quot;)) str(f2) ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 16000 obs. of 7 variables: ## $ chimp 1&#39;s average probability of pulling left: num 0.403 0.437 0.458 0.421 0.416 ... ## $ chimp 2&#39;s average probability of pulling left: num 0.993 0.99 0.991 1 0.999 ... ## $ chimp 3&#39;s average probability of pulling left: num 0.406 0.419 0.385 0.343 0.384 ... ## $ chimp 4&#39;s average probability of pulling left: num 0.353 0.347 0.31 0.286 0.429 ... ## $ chimp 5&#39;s average probability of pulling left: num 0.391 0.388 0.352 0.478 0.36 ... ## $ chimp 6&#39;s average probability of pulling left: num 0.672 0.683 0.646 0.634 0.633 ... ## $ chimp 7&#39;s average probability of pulling left: num 0.904 0.896 0.889 0.927 0.897 ... If we want to use fitted() for our third task of getting the posterior draws for the actor-level estimates from the cross-classified b12.8 model, based on block == 1, we’ll need to augment our nd data. ( nd &lt;- b12.8$data %&gt;% distinct(actor) %&gt;% mutate(block = 1) ) ## actor block ## 1 1 1 ## 2 2 1 ## 3 3 1 ## 4 4 1 ## 5 5 1 ## 6 6 1 ## 7 7 1 This time, we no longer need that re_formula argument. f3 &lt;- fitted(b12.8, newdata = nd, summary = F, scale = &quot;response&quot;) %&gt;% as_tibble() %&gt;% set_names(str_c(&quot;chimp &quot;, 1:7, &quot;&#39;s average probability of pulling left&quot;)) str(f3) ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 16000 obs. of 7 variables: ## $ chimp 1&#39;s average probability of pulling left: num 0.278 0.468 0.457 0.422 0.408 ... ## $ chimp 2&#39;s average probability of pulling left: num 0.987 0.991 0.991 1 0.999 ... ## $ chimp 3&#39;s average probability of pulling left: num 0.28 0.45 0.384 0.343 0.376 ... ## $ chimp 4&#39;s average probability of pulling left: num 0.237 0.376 0.309 0.287 0.421 ... ## $ chimp 5&#39;s average probability of pulling left: num 0.268 0.417 0.351 0.479 0.353 ... ## $ chimp 6&#39;s average probability of pulling left: num 0.538 0.709 0.646 0.635 0.625 ... ## $ chimp 7&#39;s average probability of pulling left: num 0.843 0.907 0.889 0.927 0.894 ... Let’s learn one more option. 12.5.5 tidybayes::spread_draws() Up till this point, we’ve really only used the tidybayes package for plotting (e.g., with geom_halfeyeh()) and summarizing (e.g., with median_qi()). But tidybayes is more general; it offers a handful of convenience functions for wrangling posterior draws from a tidyverse perspective. One such function is spread_draws(), which you can learn all about in Matthew Kay’s vignette Extracting and visualizing tidy draws from brms models. Let’s take a look at how we’ll be using it. library(tidybayes) b12.7 %&gt;% spread_draws(b_Intercept, r_actor[actor,]) ## # A tibble: 112,000 x 6 ## # Groups: actor [7] ## .chain .iteration .draw b_Intercept actor r_actor ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1 1 1 1.53 1 -2.08 ## 2 1 1 1 1.53 2 2.44 ## 3 1 1 1 1.53 3 -2.04 ## 4 1 1 1 1.53 4 -2.62 ## 5 1 1 1 1.53 5 -1.56 ## 6 1 1 1 1.53 6 -1.05 ## 7 1 1 1 1.53 7 0.947 ## 8 1 2 2 1.30 1 -1.35 ## 9 1 2 2 1.30 2 2.19 ## 10 1 2 2 1.30 3 -1.85 ## # … with 111,990 more rows First, notice tidybayes::spread_draws() took the model fit itself, b12.7, as input. No need for posterior_samples(). Now, notice we fed it two additional arguments. By the first argument, we that requested spead_draws() extract the posterior samples for the b_Intercept. By the second argument, r_actor[actor,], we instructed spead_draws() to extract all the random effects for the actor variable. Also notice how within the brackets [] we specified actor, which then became the name of the column in the output that indexed the levels of the grouping variable actor. By default, the code returns the posterior samples for all the levels of actor. However, had we only wanted those from chimps #1 and #3, we might use typical tidyverse-style indexing. E.g., b12.7 %&gt;% spread_draws(b_Intercept, r_actor[actor,]) %&gt;% filter(actor %in% c(1, 3)) ## # A tibble: 32,000 x 6 ## # Groups: actor [2] ## .chain .iteration .draw b_Intercept actor r_actor ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1 1 1 1.53 1 -2.08 ## 2 1 1 1 1.53 3 -2.04 ## 3 1 2 2 1.30 1 -1.35 ## 4 1 2 2 1.30 3 -1.85 ## 5 1 3 3 1.85 1 -2.27 ## 6 1 3 3 1.85 3 -2.38 ## 7 1 4 4 1.97 1 -2.24 ## 8 1 4 4 1.97 3 -2.08 ## 9 1 5 5 1.85 1 -2.22 ## 10 1 5 5 1.85 3 -3.03 ## # … with 31,990 more rows Also notice those first three columns. By default, spread_draws() extracted information about which Markov chain a given draw was from, which iteration a given draw was within a given chain, and which draw from an overall standpoint. If it helps to keep track of which vector indexed what, consider this. b12.7 %&gt;% spread_draws(b_Intercept, r_actor[actor,]) %&gt;% ungroup() %&gt;% select(.chain:.draw) %&gt;% gather() %&gt;% group_by(key) %&gt;% summarise(min = min(value), max = max(value)) ## # A tibble: 3 x 3 ## key min max ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 .chain 1 4 ## 2 .draw 1 16000 ## 3 .iteration 1 4000 Above we simply summarized each of the three variables by their minimum and maximum values. If you recall that we fit b12.7 with four Markov chains, each with 4000 post-warmup iterations, hopefully it’ll make sense what each of those three variables index. Now we’ve done a little clarification, let’s use spread_draws() to accomplish our first task, getting the posterior draws for the actor-level estimates from the b12.7 model. s1 &lt;- b12.7 %&gt;% spread_draws(b_Intercept, r_actor[actor,]) %&gt;% mutate(p = (b_Intercept + r_actor) %&gt;% inv_logit_scaled()) %&gt;% select(.draw, actor, p) %&gt;% ungroup() %&gt;% mutate(actor = str_c(&quot;chimp &quot;, actor, &quot;&#39;s average probability of pulling left&quot;)) %&gt;% spread(value = p, key = actor) str(s1) ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 16000 obs. of 8 variables: ## $ .draw : int 1 2 3 4 5 6 7 8 9 10 ... ## $ chimp 1&#39;s average probability of pulling left: num 0.367 0.489 0.397 0.431 0.41 ... ## $ chimp 2&#39;s average probability of pulling left: num 0.982 0.971 0.993 0.973 0.984 ... ## $ chimp 3&#39;s average probability of pulling left: num 0.375 0.367 0.37 0.472 0.236 ... ## $ chimp 4&#39;s average probability of pulling left: num 0.252 0.443 0.424 0.319 0.399 ... ## $ chimp 5&#39;s average probability of pulling left: num 0.493 0.313 0.386 0.436 0.383 ... ## $ chimp 6&#39;s average probability of pulling left: num 0.619 0.606 0.735 0.605 0.642 ... ## $ chimp 7&#39;s average probability of pulling left: num 0.922 0.829 0.833 0.927 0.933 ... The method remains essentially the same for accomplishing our second task, getting the posterior draws for the actor-level estimates from the cross-classified b12.8 model, averaging over the levels of block. s2 &lt;- b12.8 %&gt;% spread_draws(b_Intercept, r_actor[actor,]) %&gt;% mutate(p = (b_Intercept + r_actor) %&gt;% inv_logit_scaled()) %&gt;% select(.draw, actor, p) %&gt;% ungroup() %&gt;% mutate(actor = str_c(&quot;chimp &quot;, actor, &quot;&#39;s average probability of pulling left&quot;)) %&gt;% spread(value = p, key = actor) str(s2) ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 16000 obs. of 8 variables: ## $ .draw : int 1 2 3 4 5 6 7 8 9 10 ... ## $ chimp 1&#39;s average probability of pulling left: num 0.403 0.437 0.458 0.421 0.416 ... ## $ chimp 2&#39;s average probability of pulling left: num 0.993 0.99 0.991 1 0.999 ... ## $ chimp 3&#39;s average probability of pulling left: num 0.406 0.419 0.385 0.343 0.384 ... ## $ chimp 4&#39;s average probability of pulling left: num 0.353 0.347 0.31 0.286 0.429 ... ## $ chimp 5&#39;s average probability of pulling left: num 0.391 0.388 0.352 0.478 0.36 ... ## $ chimp 6&#39;s average probability of pulling left: num 0.672 0.683 0.646 0.634 0.633 ... ## $ chimp 7&#39;s average probability of pulling left: num 0.904 0.896 0.889 0.927 0.897 ... To accomplish our third task, we augment the spread_draws() and first mutate() lines, and add a filter() line between them. s3 &lt;- b12.8 %&gt;% spread_draws(b_Intercept, r_actor[actor,], r_block[block,]) %&gt;% filter(block == 1) %&gt;% mutate(p = (b_Intercept + r_actor + r_block) %&gt;% inv_logit_scaled()) %&gt;% select(.draw, actor, p) %&gt;% ungroup() %&gt;% mutate(actor = str_c(&quot;chimp &quot;, actor, &quot;&#39;s average probability of pulling left&quot;)) %&gt;% spread(value = p, key = actor) ## Adding missing grouping variables: `block` str(s3) ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 16000 obs. of 9 variables: ## $ block : int 1 1 1 1 1 1 1 1 1 1 ... ## $ .draw : int 1 2 3 4 5 6 7 8 9 10 ... ## $ chimp 1&#39;s average probability of pulling left: num 0.278 0.468 0.457 0.422 0.408 ... ## $ chimp 2&#39;s average probability of pulling left: num 0.987 0.991 0.991 1 0.999 ... ## $ chimp 3&#39;s average probability of pulling left: num 0.28 0.45 0.384 0.343 0.376 ... ## $ chimp 4&#39;s average probability of pulling left: num 0.237 0.376 0.309 0.287 0.421 ... ## $ chimp 5&#39;s average probability of pulling left: num 0.268 0.417 0.351 0.479 0.353 ... ## $ chimp 6&#39;s average probability of pulling left: num 0.538 0.709 0.646 0.635 0.625 ... ## $ chimp 7&#39;s average probability of pulling left: num 0.843 0.907 0.889 0.927 0.894 ... Hopefully working through these examples gave you some insight on the relation between fixed and random effects within multilevel models, and perhaps added to your posterior-iteration-wrangling toolkit. Reference McElreath, R. (2016). Statistical rethinking: A Bayesian course with examples in R and Stan. Chapman &amp; Hall/CRC Press. Session info sessionInfo() ## R version 3.5.1 (2018-07-02) ## Platform: x86_64-apple-darwin15.6.0 (64-bit) ## Running under: macOS High Sierra 10.13.6 ## ## Matrix products: default ## BLAS: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] parallel stats graphics grDevices utils datasets methods ## [8] base ## ## other attached packages: ## [1] tidybayes_1.0.4 gridExtra_2.3 bayesplot_1.6.0 ## [4] ggthemes_4.0.1 forcats_0.3.0 stringr_1.3.1 ## [7] dplyr_0.8.0.1 purrr_0.2.5 readr_1.1.1 ## [10] tidyr_0.8.1 tibble_2.1.1 tidyverse_1.2.1 ## [13] brms_2.8.0 Rcpp_1.0.0 rstan_2.18.2 ## [16] StanHeaders_2.18.0-1 ggplot2_3.1.0 ## ## loaded via a namespace (and not attached): ## [1] readxl_1.1.0 backports_1.1.2 ## [3] plyr_1.8.4 igraph_1.2.1 ## [5] lazyeval_0.2.1 svUnit_0.7-12 ## [7] crosstalk_1.0.0 rstantools_1.5.0 ## [9] inline_0.3.15 digest_0.6.18 ## [11] htmltools_0.3.6 rsconnect_0.8.8 ## [13] fansi_0.4.0 magrittr_1.5 ## [15] modelr_0.1.2 extrafont_0.17 ## [17] matrixStats_0.54.0 xts_0.10-2 ## [19] extrafontdb_1.0 prettyunits_1.0.2 ## [21] colorspace_1.3-2 rvest_0.3.2 ## [23] haven_1.1.2 xfun_0.3 ## [25] callr_3.1.0 crayon_1.3.4 ## [27] jsonlite_1.5 bindr_0.1.1 ## [29] zoo_1.8-2 glue_1.3.0 ## [31] gtable_0.2.0 pkgbuild_1.0.2 ## [33] Rttf2pt1_1.3.7 abind_1.4-5 ## [35] scales_1.0.0 mvtnorm_1.0-8 ## [37] miniUI_0.1.1.1 xtable_1.8-2 ## [39] ggstance_0.3 stats4_3.5.1 ## [41] DT_0.4 htmlwidgets_1.2 ## [43] httr_1.3.1 threejs_0.3.1 ## [45] arrayhelpers_1.0-20160527 RColorBrewer_1.1-2 ## [47] pkgconfig_2.0.2 reshape_0.8.7 ## [49] loo_2.1.0 utf8_1.1.4 ## [51] tidyselect_0.2.5 labeling_0.3 ## [53] rlang_0.3.1 reshape2_1.4.3 ## [55] later_0.7.3 munsell_0.5.0 ## [57] cellranger_1.1.0 tools_3.5.1 ## [59] cli_1.0.1 pacman_0.4.6 ## [61] generics_0.0.2 broom_0.5.1 ## [63] ggridges_0.5.0 evaluate_0.10.1 ## [65] yaml_2.1.19 processx_3.2.1 ## [67] knitr_1.20 nlme_3.1-137 ## [69] mime_0.5 xml2_1.2.0 ## [71] compiler_3.5.1 shinythemes_1.1.1 ## [73] rstudioapi_0.7 beeswarm_0.2.3 ## [75] stringi_1.2.3 highr_0.7 ## [77] ps_1.2.1 Brobdingnag_1.2-5 ## [79] gdtools_0.1.7 lattice_0.20-35 ## [81] Matrix_1.2-14 markdown_0.8 ## [83] shinyjs_1.0 pillar_1.3.1 ## [85] bridgesampling_0.4-0 httpuv_1.4.4.2 ## [87] R6_2.3.0 bookdown_0.9 ## [89] promises_1.0.1 vipor_0.4.5 ## [91] codetools_0.2-15 colourpicker_1.0 ## [93] MASS_7.3-50 gtools_3.8.1 ## [95] assertthat_0.2.0 rprojroot_1.3-2 ## [97] withr_2.1.2 shinystan_2.5.0 ## [99] hms_0.4.2 grid_3.5.1 ## [101] coda_0.19-2 rmarkdown_1.10 ## [103] shiny_1.1.0 lubridate_1.7.4 ## [105] base64enc_0.1-3 dygraphs_1.1.1.5 "]
]
